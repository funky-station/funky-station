// SPDX-FileCopyrightText: 2025 Evaisa <evagiacosa1@gmail.com>
// SPDX-FileCopyrightText: 2025 EvaisaDev <mail@evaisa.dev>
//
// SPDX-License-Identifier: AGPL-3.0-or-later AND MIT

using System.Linq;
using System.Numerics;
using Content.Client.Resources;
using Content.Shared._DV.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Client.ResourceManagement;

namespace Content.Client._Funkystation.NanoChat;

[GenerateTypedNameReferences]
public sealed partial class GroupMembersPopup : DefaultWindow
{
    private List<NanoChatRecipient> _allContacts = new();
    private HashSet<uint> _members = new();
    private HashSet<uint> _admins = new();
    private uint _ownNumber;
    private uint? _creatorId;

    public event Action<uint>? OnKick;
    public event Action<uint>? OnAdmin;
    public event Action<uint>? OnDeadmin;

    public GroupMembersPopup()
    {
        RobustXamlLoader.Load(this);

        ContentsContainer.Margin = new Thickness(3);

        MembersCloseButton.OnPressed += _ => Close();
    }

    public void SetMembers(List<NanoChatRecipient> allContacts, HashSet<uint> members, uint ownNumber, uint? creatorId, HashSet<uint>? admins = null)
    {
        _allContacts = allContacts;
        _members = members;
        _ownNumber = ownNumber;
        _creatorId = creatorId;
        _admins = admins ?? new HashSet<uint>();
        UpdateMembersList();
    }

    private void UpdateMembersList()
    {
        MembersList.RemoveAllChildren();

        if (_members.Count == 0)
        {
            MembersList.AddChild(new Label { Text = Loc.GetString("nano-chat-no-members") });
            return;
        }

        var isCreator = _creatorId == _ownNumber;
        var isAdmin = _admins.Contains(_ownNumber);
        var canManage = isCreator || isAdmin;

        var memberContacts = _allContacts
            .Where(c => _members.Contains(c.Number))
            .OrderBy(c => c.Name)
            .ToList();

        for (var idx = 0; idx < memberContacts.Count; idx++)
        {
            var contact = memberContacts[idx];
            var isEvenRow = idx % 2 == 0;
            var isMemberAdmin = _admins.Contains(contact.Number);
            var isMemberCreator = contact.Number == _creatorId;
            var isSelf = contact.Number == _ownNumber;

            var canKick = false;
            if (isSelf) // can always leave yourself.
            {
                canKick = true;
            }
            else if (!isSelf && canManage && !isMemberCreator)
            {
                if (isCreator)
                    canKick = true;
                else if (isAdmin && !isMemberAdmin)
                    canKick = true;
            }

            var canAdmin = canManage && !isSelf && !isMemberCreator && !isMemberAdmin;

            var canDeadmin = canManage && !isSelf && !isMemberCreator && isMemberAdmin;
            if (!isCreator && canDeadmin)
                canDeadmin = false;

            var contactControl = new MemberContainer(contact, isEvenRow, isMemberCreator, isMemberAdmin, isSelf, canKick, canAdmin, canDeadmin, OnKick, OnAdmin, OnDeadmin);
            MembersList.AddChild(contactControl);
        }
    }

    private sealed class MemberContainer : PanelContainer
    {
        public MemberContainer(NanoChatRecipient contact, bool isEvenRow, bool isCreator, bool isAdmin, bool isSelf, bool canKick, bool canMakeAdmin, bool canDeadmin, Action<uint>? onKick, Action<uint>? onAdmin, Action<uint>? onDeadmin)
        {
            HorizontalExpand = true;
            StyleClasses.Add(isEvenRow ? "PanelBackgroundBaseDark" : "PanelBackgroundLight");

            var resCache = IoCManager.Resolve<IResourceCache>();

            var nameLabel = new Label
            {
                Text = contact.Name + (isCreator ? $" {Loc.GetString("nano-chat-owner-suffix")}" : isAdmin ? $" {Loc.GetString("nano-chat-admin-suffix")}" : ""),
                HorizontalAlignment = HAlignment.Left,
                HorizontalExpand = true
            };

            var numberLabel = new Label
            {
                Text = $"#{contact.Number:D4}",
                HorizontalAlignment = HAlignment.Right,
                Margin = new Thickness(0, 0, (canKick || canMakeAdmin || canDeadmin) ? 108 : 4, 0),
            };

            AddChild(nameLabel);
            AddChild(numberLabel);

            // Admin/Deadmin button
            if (canMakeAdmin)
            {
                var adminButton = new Button
                {
                    HorizontalAlignment = HAlignment.Right,
                    MinSize = new Vector2(32, 32),
                    MaxSize = new Vector2(32, 32),
                    ToolTip = Loc.GetString("nano-chat-admin"),
                    Margin = new Thickness(0, 0, canKick ? 72 : 36, 0),
                };

                adminButton.AddStyleClass("OpenBoth");
                adminButton.AddChild(new TextureRect
                {
                    Texture = resCache.GetTexture("/Textures/_Funkystation/Interface/NanoChat/admin.png"),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    MinSize = new Vector2(28, 28),
                    MaxSize = new Vector2(28, 28),
                });
                adminButton.OnPressed += _ => onAdmin?.Invoke(contact.Number);

                AddChild(adminButton);
            }
            else if (canDeadmin)
            {
                var deadminButton = new Button
                {
                    HorizontalAlignment = HAlignment.Right,
                    MinSize = new Vector2(32, 32),
                    MaxSize = new Vector2(32, 32),
                    ToolTip = Loc.GetString("nano-chat-deadmin"),
                    Margin = new Thickness(0, 0, canKick ? 72 : 36, 0),
                };

                deadminButton.AddStyleClass("OpenBoth");
                deadminButton.AddChild(new TextureRect
                {
                    Texture = resCache.GetTexture("/Textures/_Funkystation/Interface/NanoChat/deadmin.png"),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    MinSize = new Vector2(28, 28),
                    MaxSize = new Vector2(28, 28),
                });
                deadminButton.OnPressed += _ => onDeadmin?.Invoke(contact.Number);

                AddChild(deadminButton);
            }

            // Kick/Leave button
            if (canKick)
            {
                var kickButton = new Button
                {
                    Text = isSelf ? "Leave" : "X",
                    HorizontalAlignment = HAlignment.Right,
                    MinSize = new Vector2(isSelf ? 64 : 32, 32),
                    MaxSize = new Vector2(isSelf ? 64 : 32, 32),
                    ToolTip = isSelf ? Loc.GetString("nano-chat-leave") : Loc.GetString("nano-chat-kick"),
                    Margin = new Thickness(0, 0, 36, 0),
                };

                kickButton.AddStyleClass("OpenBoth");
                kickButton.OnPressed += _ => onKick?.Invoke(contact.Number);

                AddChild(kickButton);
            }
        }
    }
}
