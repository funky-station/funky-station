// SPDX-FileCopyrightText: 2023 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Fildrance <fildrance@gmail.com>
// SPDX-FileCopyrightText: 2024 Nemanja <98561806+EmoGarbage404@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 username <113782077+whateverusername0@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Tyranex <bobthezombie4@gmail.com>
// SPDX-FileCopyrightText: 2025 taydeo <td12233a@gmail.com>
//
// SPDX-License-Identifier: MIT

using Content.Client.GameTicking.Managers;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Content.Client.MalfAI.Theme;

namespace Content.Client.Store.Ui;

[GenerateTypedNameReferences]
public sealed partial class StoreListingControl : Control
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    private readonly ClientGameTicker _ticker;

    private readonly ListingData _data;

    private readonly bool _hasBalance;
    private readonly string _price;

    public void ApplyMalfTheme(Font font, Color accent)
    {
        // Apply font theming locally (do not touch global theme).
        StoreItemName.FontOverride = font;

        // RichTextLabel doesn't support FontOverride; render description in monospace via markup.
        ApplyMalfDescriptionMonospace();

        // Apply color theming.
        StoreItemName.Modulate = accent;
        StoreItemDescription.Modulate = accent;

        // Buttons don't have FontOverride directly; set their label if present.
        if (StoreItemBuyButton.Label != null)
        {
            StoreItemBuyButton.Label.FontOverride = font;
            StoreItemBuyButton.Label.Modulate = accent;
        }

        // Apply Malf-styled green-bordered black background to buy button unless it's a sale-red button.
        if (!StoreItemBuyButton.HasStyleClass("ButtonColorRed"))
        {
            var buyStyle = MalfUiTheme.CreateButtonStyle(accent);
            StoreItemBuyButton.StyleBoxOverride = buyStyle;
        }
    }

    // Call this ONLY for the Malf AI shop to render description in monospace.
    public void ApplyMalfDescriptionMonospace()
    {
        var current = StoreItemDescription.Text ?? string.Empty;

        // Avoid double-wrapping if called multiple times.
        if (!string.IsNullOrEmpty(current) && !current.StartsWith("[font=Monospace]"))
            StoreItemDescription.Text = $"[font=Monospace]{current}[/font]";
    }

    public StoreListingControl(ListingData data, string price, bool hasBalance, Texture? texture = null)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _ticker = _entity.System<ClientGameTicker>();

        _data = data;
        _hasBalance = hasBalance;
        _price = price;

        StoreItemName.Text = ListingLocalisationHelpers.GetLocalisedNameOrEntityName(_data, _prototype);
        StoreItemDescription.SetMessage(ListingLocalisationHelpers.GetLocalisedDescriptionOrEntityDescription(_data, _prototype));

        UpdateBuyButtonText();
        StoreItemBuyButton.Disabled = !CanBuy();

        StoreItemTexture.Texture = texture;
    }

    private bool CanBuy()
    {
        if (!_hasBalance)
            return false;

        var stationTime = _timing.CurTime.Subtract(_ticker.RoundStartTimeSpan);
        if (_data.RestockTime > stationTime)
            return false;

        return true;
    }

    private void UpdateBuyButtonText()
    {
        var stationTime = _timing.CurTime.Subtract(_ticker.RoundStartTimeSpan);
        if (_data.RestockTime > stationTime)
        {
            var timeLeftToBuy = _data.RestockTime - stationTime;
            StoreItemBuyButton.Text = timeLeftToBuy.Duration().ToString(@"mm\:ss");
        }
        else
        {
            StoreItemBuyButton.Text = _price;
        }
    }

    private void UpdateName()
    {
        var name = ListingLocalisationHelpers.GetLocalisedNameOrEntityName(_data, _prototype);

        var stationTime = _timing.CurTime.Subtract(_ticker.RoundStartTimeSpan);
        if (_data.RestockTime > stationTime)
        {
            name += Loc.GetString("store-ui-button-out-of-stock");
        }

        StoreItemName.Text = name;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateBuyButtonText();
        UpdateName();
        StoreItemBuyButton.Disabled = !CanBuy();
    }
}
