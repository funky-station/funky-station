// SPDX-FileCopyrightText: 2025 Tyranex <bobthezombie4@gmail.com>
//
// SPDX-License-Identifier: MIT

using Robust.Client.AutoGenerated;
using Content.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.MalfAI;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.ResourceManagement;
using Robust.Client.Graphics;
using Content.Client.MalfAI.Theme;
using Robust.Shared.Timing;

namespace Content.Client.MalfAI;

[GenerateTypedNameReferences]
public sealed partial class MalfAiBorgsWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IResourceCache _resCache = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;

    private SpriteSystem _sprite = default!;
    private Font? _kodeMono;
    private readonly List<Label> _criticalLabels = new();

    // Malf UI accent color (green)
    private static readonly Color MalfGreen = MalfUiTheme.Accent;

    public event Action<string>? OnUpdateLawsRequested;
    public event Action<string>? OnJumpToBorgRequested;
    public event Action? OnMasterLawsetRequested;
    public event Action<string, bool>? OnSetSyncRequested;

    public MalfAiBorgsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entMan.System<SpriteSystem>();

        // Apply Malf AI theme with CRT static overlay
        if (RootBackdrop != null)
        {
            // Set black backdrop for Malf theme
            RootBackdrop.PanelOverride = MalfUiTheme.CreateBackdropStyle();

            // Add scrolling error backdrop behind all UI elements - insert at beginning so it appears behind
            var errorBackdrop = MalfEffectOverlay.CreateErrorBackdrop();
            RootBackdrop.AddChild(errorBackdrop);
            errorBackdrop.SetPositionInParent(0); // Move to first position (behind all other elements)

            // Add CRT static overlay using the unified effect system - this stays on top
            var staticOverlay = MalfEffectOverlay.CreateStaticOverlay();
            RootBackdrop.AddChild(staticOverlay);

            // Apply  Malf stylesheet
            RootBackdrop.Stylesheet = MalfUiTheme.GetCachedStylesheet(_resCache, 12);
        }

        // Load font for dynamic styling that can't be handled by stylesheet (Like borg health health)
        _kodeMono = MalfUiTheme.GetFont(_resCache, 12);

        // Style and wire the Master Lawset button
        MasterLawsetButton.StyleBoxOverride = MalfUiTheme.CreateButtonStyle(MalfUiTheme.Accent);
        MasterLawsetButton.OnPressed += _ => OnMasterLawsetRequested?.Invoke();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        // Update flashing colors for all critical labels
        if (_criticalLabels.Count > 0)
        {
            var elapsed = _gameTiming.RealTime.TotalSeconds;
            var flashCycle = elapsed % 1.0; // 1 second full cycle (0.5s green, 0.5s white)
            var isGreenPhase = flashCycle < 0.5;
            var color = isGreenPhase ? Color.Green : Color.White;

            foreach (var label in _criticalLabels)
            {
                if (label.Disposed)
                    continue;
                label.Modulate = color;
            }
        }
    }

    private PanelContainer WrapWithGreenOutline(Robust.Client.UserInterface.Control child)
    {
        // Custom malf button styling application
        var border = MalfUiTheme.CreateButtonStyle(MalfUiTheme.Accent);

        var panel = new PanelContainer
        {
            PanelOverride = border,
            HorizontalExpand = false,
            VerticalExpand = false
        };
        panel.AddChild(child);
        return panel;
    }

    private readonly Dictionary<CheckBox, PanelContainer> _checkboxStylePanels = new();

    private PanelContainer CreateStyledCheckbox(CheckBox checkbox, bool isChecked)
    {
        // Create a styled panel that represents the checkbox square
        var style = isChecked
            ? MalfUiTheme.CreateCheckboxActiveStyle(MalfUiTheme.Accent)  // Filled square
            : MalfUiTheme.CreateCheckboxInactiveStyle(MalfUiTheme.Accent); // Hollow square

        var panel = new PanelContainer
        {
            PanelOverride = style,
            MinSize = new System.Numerics.Vector2(16, 16),
            MaxSize = new System.Numerics.Vector2(16, 16),
            VerticalAlignment = Robust.Client.UserInterface.Control.VAlignment.Center
        };

        return panel;
    }

    private void ApplyHollowSquareCheckboxStyle(CheckBox checkbox)
    {
        if (checkbox.TextureRect == null) return;

        // Hide the default checkbox texture
        checkbox.TextureRect.Visible = false;
        checkbox.TextureRect.MinSize = new System.Numerics.Vector2(16, 16);

        // Create and store the styled panel in our dictionary
        var stylePanel = CreateStyledCheckbox(checkbox, checkbox.Pressed);
        _checkboxStylePanels[checkbox] = stylePanel;

        // Insert the styled panel in the same parent as the TextureRect
        var parent = checkbox.TextureRect.Parent;
        if (parent != null)
        {
            var index = checkbox.TextureRect.GetPositionInParent();
            parent.AddChild(stylePanel);
            stylePanel.SetPositionInParent(index);
        }
    }

    private void UpdateCheckboxStyle(CheckBox checkbox, bool isChecked)
    {
        if (!_checkboxStylePanels.TryGetValue(checkbox, out var stylePanel)) return;

        // Update the panel's style based on the checkbox state
        var style = isChecked
            ? MalfUiTheme.CreateCheckboxActiveStyle(MalfUiTheme.Accent)  // Filled square
            : MalfUiTheme.CreateCheckboxInactiveStyle(MalfUiTheme.Accent); // Hollow square

        stylePanel.PanelOverride = style;
    }

    private Robust.Client.UserInterface.Control CreateHealthIndicator(float healthFraction, bool isCritical)
    {
        // Calculate how many rectangles should be filled (1-4)
        var filledRectangles = Math.Max(1, Math.Min(4, (int)Math.Ceiling(healthFraction * 4)));

        // Create a main container that will hold both the rectangles and the overlaid text
        var mainContainer = new Robust.Client.UserInterface.Control
        {
            MinSize = new System.Numerics.Vector2(56, 75),
            Margin = new Thickness(8, 0, 0, 0)
        };

        // Create a vertical container for the 4 stacked rectangles (top to bottom)
        var rectangleStack = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            SeparationOverride = 1,
            HorizontalAlignment = Robust.Client.UserInterface.Control.HAlignment.Center,
            VerticalAlignment = Robust.Client.UserInterface.Control.VAlignment.Center
        };

        // Create 4 rectangles from top to bottom (reverse order for visual top-to-bottom stacking)
        for (int i = 3; i >= 0; i--)
        {
            var rectangle = new PanelContainer
            {
                MinSize = new System.Numerics.Vector2(48, 8),
                MaxSize = new System.Numerics.Vector2(48, 8)
            };

            // Fill rectangle if it should be active (bottom-up filling, so check if i < filledRectangles)
            var shouldFill = i < filledRectangles;
            var style = new StyleBoxFlat
            {
                BackgroundColor = shouldFill ? Color.Red : Color.Transparent,
                BorderColor = Color.Red,
                BorderThickness = new Thickness(1f)
            };
            rectangle.PanelOverride = style;

            rectangleStack.AddChild(rectangle);
        }

        mainContainer.AddChild(rectangleStack);

        // Create health text - show "CRIT" when at critical threshold (0%), otherwise show percentage
        var healthText = new Label
        {
            HorizontalAlignment = Robust.Client.UserInterface.Control.HAlignment.Center,
            VerticalAlignment = Robust.Client.UserInterface.Control.VAlignment.Center
        };

        // Font now handled by stylesheet, but we need to override font for specific styling
        if (_kodeMono != null)
            healthText.FontOverride = _kodeMono;

        if (isCritical)
        {
            // Critical state - show "CRIT" with flashing animation between green and white
            healthText.Text = "CRIT";

            // Add to tracking list for continuous flashing updates
            _criticalLabels.Add(healthText);

            // Initial color calculation
            var elapsed = _gameTiming.RealTime.TotalSeconds;
            var flashCycle = elapsed % 1.0; // 1 second full cycle (0.5s green, 0.5s white)
            var isGreenPhase = flashCycle < 0.5;

            healthText.Modulate = isGreenPhase ? Color.Green : Color.White;
        }
        else
        {
            // Normal state - show percentage with color gradient from green (100%) to red (0%)
            healthText.Text = $"{(int)(healthFraction * 100)}%";
            var textColor = new Color(1f - healthFraction, healthFraction, 0f);
            // Override stylesheet color for dynamic health color gradient
            healthText.Modulate = textColor;
        }

        mainContainer.AddChild(healthText);

        return mainContainer;
    }

    public void UpdateState(MalfAiBorgsUiState state)
    {
        if (state == null)
            return;

        var has = state.Borgs != null && state.Borgs.Count > 0;
        NoBorgs.Visible = !has;
        ListContainer.Visible = has;
        Rows.Children.Clear();

        // Clear the checkbox styling dictionary and critical labels list when updating state
        _checkboxStylePanels.Clear();
        _criticalLabels.Clear();
        if (state.Borgs != null)
        {
            foreach (var entry in state.Borgs)
            {
                // Create a green-outlined panel for this entry using the shared Malf theme.
                var panel = new PanelContainer
                {
                    HorizontalExpand = true
                };
                var style = MalfUiTheme.CreateCategoryPanelStyle(MalfUiTheme.Accent);
                panel.PanelOverride = style;

                var row = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    HorizontalExpand = true,
                    SeparationOverride = 6
                };

                // Icon for chassis on the left
                if (entry.ChassisSprite != null)
                {
                    var tex = _sprite.Frame0(entry.ChassisSprite);
                    var icon = new TextureRect
                    {
                        Texture = tex,
                        Stretch = TextureRect.StretchMode.KeepCentered,
                        TextureScale = new System.Numerics.Vector2(1.5f, 1.5f),
                        MinSize = new System.Numerics.Vector2(48, 48)
                    };
                    row.AddChild(icon);
                }

                var label = new Label
                {
                    Text = entry.Name,
                };
                // Font and color now handled by stylesheet
                row.AddChild(label);

                // Spacer to push button and health to the right
                var spacer = new Robust.Client.UserInterface.Control { HorizontalExpand = true };
                row.AddChild(spacer);

                // Buttons container (vertical) on the right: Update Laws, then Warp.
                var buttonsCol = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical
                };

                var updateBtn = new Button
                {
                    Text = "Manage laws",
                    MinWidth = 110
                };
                // Font, color, and transparent background now handled by stylesheet
                var uid = entry.UniqueId; // capture
                updateBtn.OnPressed += _ => OnUpdateLawsRequested?.Invoke(uid);

                // Sync to master toggle
                var syncToggle = new CheckBox
                {
                    Text = "Sync to master",
                    Pressed = entry.Synced,
                    MinWidth = 110
                };
                // Font and color now handled by stylesheet

                // Apply custom hollow square styling to the checkbox
                ApplyHollowSquareCheckboxStyle(syncToggle);

                syncToggle.OnToggled += args =>
                {
                    // Update the checkbox style based on state
                    UpdateCheckboxStyle(syncToggle, args.Pressed);

                    // Disable manage laws when synced
                    updateBtn.Disabled = args.Pressed;
                    OnSetSyncRequested?.Invoke(uid, args.Pressed);
                };

                // initial disable state if synced and apply initial checkbox style
                updateBtn.Disabled = entry.Synced;
                UpdateCheckboxStyle(syncToggle, entry.Synced);

                buttonsCol.AddChild(WrapWithGreenOutline(updateBtn));
                buttonsCol.AddChild(WrapWithGreenOutline(syncToggle));

                var warpBtn = new Button
                {
                    Text = "Warp",
                    MinWidth = 110
                };
                // Font, color, and transparent background now handled by stylesheet
                warpBtn.OnPressed += _ => OnJumpToBorgRequested?.Invoke(uid);
                buttonsCol.AddChild(WrapWithGreenOutline(warpBtn));

                row.AddChild(buttonsCol);

                // Health visual indicator with 4 stacked rectangles and overlaid percentage
                var frac = Math.Clamp(entry.HealthFraction, 0f, 1f);
                var healthIndicator = CreateHealthIndicator(frac, entry.IsCritical);
                row.AddChild(healthIndicator);

                panel.AddChild(row);
                Rows.AddChild(panel);
            }
        }
    }
}
