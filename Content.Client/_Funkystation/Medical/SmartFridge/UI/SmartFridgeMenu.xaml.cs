using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared._Funkystation.Medical.SmartFridge;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client._Funkystation.Medical.SmartFridge.UI;


[GenerateTypedNameReferences]
public sealed partial class SmartFridgeMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public List<SmartFridgeItem> Rows;

    private readonly Dictionary<EntProtoId, EntityUid> _dummies = [];

    public event Action<BaseButton.ButtonEventArgs, SmartFridgeItem.DispenseButton>? OnItemSelected;

    /// <summary>
    /// create and initialize the ui, client side
    /// </summary>
    public SmartFridgeMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        VendingContents.SearchBar = SearchBar;
        VendingContents.DataFilterCondition += DataFilterCondition;
        VendingContents.GenerateItem += GenerateRow;

        Rows = [];
    }

    private static bool DataFilterCondition(string filter, ListData data)
    {
        if (data is not FridgeItemsListData { ItemName: var text })
            return false;

        return string.IsNullOrEmpty(filter) || text.Contains(filter, StringComparison.CurrentCultureIgnoreCase);
    }

    // it SHOULD BE FINE that it's a ListContainerButton instead of a container as long as there's no call for the button input
    // i don't think i can change it without refactoring how ListContainers work
    private void GenerateRow(ListData data, ListContainerButton panel)
    {
        if (data is not FridgeItemsListData { ItemProtoId: var protoId, Uid: var uid, ItemIndex: var index, ItemName: var name, ItemQuantity: var quantity })
            return;

        var row = new SmartFridgeItem(protoId, name, quantity);

        row.OnItemSelected += OnItemSelected;
        row.GetDispenseButtons(index, name);
        panel.AddChild(row);
        Rows.Add(row);

        var identity = Identity.Name(uid, _entityManager);
        panel.ToolTip = $"{identity} [{quantity}]" ;
        // identity is used over name so it says what it is (bottle, pill) over what it is labeled
    }

    /// <summary>
    /// Populates the list of available items on the vending machine interface
    /// and sets icons based on their prototypes
    /// </summary>
    public void Populate(List<SmartFridgeInventoryItem> inventory)
    {
        // out of stock labels
        if (inventory.Count == 0 && VendingContents.Visible)
        {
            SearchBar.Visible = false;
            VendingContents.Visible = false;

            var outOfStockLabel = new Label
            {
                Text = Loc.GetString("smart-fridge-oos"),
                Margin = new Thickness(4, 20),
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Top,
                HorizontalAlignment = HAlignment.Center,
            };

            ContainerContents.AddChild(outOfStockLabel);

            return;
        }

        var listData = new List<FridgeItemsListData>();

        for (var i = 0; i < inventory.Count; i++)
        {
            var entry = inventory[i];
            if (!_prototypeManager.TryIndex(entry.Id, out var prototype))
                continue;

            if (!_dummies.TryGetValue(entry.Id, out var dummy))
            {
                dummy = _entityManager.Spawn(entry.Id);
                _dummies.Add(entry.Id, dummy);
            }

            var uid = dummy;
            var itemName = entry.ItemName; // this is so it shows what it is labeled
            var quantity = entry.Quantity;

            listData.Add(new FridgeItemsListData(prototype.ID, uid, itemName, quantity, i));
        }

        VendingContents.PopulateList(listData);
    }
}

public record FridgeItemsListData(EntProtoId ItemProtoId, EntityUid Uid, string ItemName, FixedPoint2 ItemQuantity, int ItemIndex) : ListData;
