// SPDX-FileCopyrightText: 2025 Steve <marlumpy@gmail.com>
// SPDX-FileCopyrightText: 2025 marc-pelletier <113944176+marc-pelletier@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Linq;
using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.RCD;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.RCD;

[GenerateTypedNameReferences]
public sealed partial class RPDMenu : RadialMenu
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly ILocalizationManager _locManager = default!;
    private RCDMenu _rcdMenu;
    private string? _selectedColor;

    public event Action<string>? ColorSelected;
    public event Action<ProtoId<RCDPrototype>>? SendRCDSystemMessageAction
    {
        add => _rcdMenu.SendRCDSystemMessageAction += value;
        remove => _rcdMenu.SendRCDSystemMessageAction -= value;
    }

    private EntityUid _owner;

    public RPDMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _rcdMenu = new RCDMenu();
        var rdcHolder = FindControl<Control>("RCDMenuHolder");
        rdcHolder.AddChild(_rcdMenu);
        _rcdMenu.OnClose += () => Close();
    }

    public void SetEntity(EntityUid uid)
    {
        _owner = uid;
        _rcdMenu.SetEntity(uid);
    }

    public void Populate(Dictionary<string, Color?> palette, string selectedColor = "default")
    {
        _selectedColor = palette.ContainsKey(selectedColor) ? selectedColor : "default";
        var colorList = FindControl<BoxContainer>("ColorList");
        if (colorList == null)
            return;

        foreach (var child in colorList.Children)
            child.Dispose();
        colorList.RemoveAllChildren();

        foreach (var color in palette)
        {
            var button = new Button
            {
                Name = $"ColorBox_{color.Key}",
                Visible = true,
                MinSize = new Vector2(30, 30),
                MaxSize = new Vector2(30, 30),
                Margin = new Thickness(6),
                StyleClasses = { "OpenBoth" },
                ToolTip = _locManager.GetString(color.Key)
            };

            var colorPanel = new PanelContainer
            {
                MinSize = new Vector2(30, 30),
                MaxSize = new Vector2(30, 30),
                PanelOverride = color.Value != null 
                    ? new StyleBoxFlat { BackgroundColor = color.Value.Value }
                    : new StyleBoxFlat { BackgroundColor = Color.Transparent }
            };

            UpdateButtonBorder(colorPanel, color.Key);

            button.OnMouseEntered += args =>
            {
                if (colorPanel.PanelOverride == null)
                    return;
                ((StyleBoxFlat)colorPanel.PanelOverride).BorderColor = Color.LightBlue;
                ((StyleBoxFlat)colorPanel.PanelOverride).BorderThickness = new Thickness(3);
            };

            button.OnMouseExited += args => UpdateButtonBorder(colorPanel, color.Key);

            button.OnPressed += args =>
            {
                if (_selectedColor != color.Key)
                {
                    _selectedColor = color.Key;
                    UpdateAllButtonBorders();
                    ColorSelected?.Invoke(_selectedColor);
                }
            };

            button.AddChild(colorPanel);
            colorList.AddChild(button);
        }

        UpdateAllButtonBorders();
    }

    private void UpdateButtonBorder(PanelContainer panel, string colorKey)
    {
        if (panel.PanelOverride == null)
            return;

        var styleBox = (StyleBoxFlat)panel.PanelOverride;
        if (_selectedColor == colorKey)
        {
            styleBox.BorderColor = Color.Gold;
            styleBox.BorderThickness = new Thickness(3);
        }
        else
        {
            styleBox.BorderColor = Color.Transparent;
            styleBox.BorderThickness = new Thickness(3);
        }
    }

    private void UpdateAllButtonBorders()
    {
        var colorList = FindControl<BoxContainer>("ColorList");
        if (colorList == null)
            return;

        foreach (var child in colorList.Children)
        {
            if (child is Button button && button.Name != null)
            {
                string colorKey;
                if (button.Name == "DefaultButton")
                    colorKey = "default";
                else if (button.Name.StartsWith("ColorBox_"))
                    colorKey = button.Name.Replace("ColorBox_", "");
                else
                    continue;

                var panel = button.Children.OfType<PanelContainer>().FirstOrDefault();
                if (panel != null)
                    UpdateButtonBorder(panel, colorKey);
            }
        }
    }
}