using System.Diagnostics;
using System.Linq;
using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared._Funkystation.Payouts;
using Content.Shared.Security;
using Content.Shared.StationRecords;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Funkystation.Payouts;

[GenerateTypedNameReferences]
public sealed partial class PaymentRecordsConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly IPrototypeManager _proto;
    public Action<uint?>? OnKeySelected;
    
    public PaymentRecordsConsoleWindow(EntityUid console, IPrototypeManager prototypeManager)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        
        _proto = prototypeManager;
        _spriteSystem = _entManager.System<SpriteSystem>();
        
        // RecordListing.OnItemSelected += args =>
        // {
        //     if (!args.Pressed)
        //         return;
        //     
        //     OnKeySelected?.Invoke(args.);
        // };
        
        OpenCentered();
    }

    public void UpdateState(PayoutRecordsConsoleState state)
    {
        NoRecords.Visible = state.RecordListing == null || state.RecordListing.Count == 0;
        PopulateRecordListing(state.RecordListing);

        if (state.PaymentRecord == null || state.StationRecord == null)
        {
            PersonContainer.Visible = false;
            return;
        }
        
        // we do this shit up here man COME ON
        PopulateRecordContainer(state.StationRecord, state.PaymentRecord);

        if (state.PaymentRecord.History.Count == 0)
        {
            PaymentHistoryContainer.Visible = true;
        }
    }
    
    private void PopulateRecordContainer(GeneralStationRecord stationRecord, PaymentRecord paymentRecord)
    {
        var specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Misc/job_icons.rsi"), "Unknown");
        var na = Loc.GetString("generic-not-available-shorthand");
        PersonName.Text = stationRecord.Name;
        PersonJob.Text = stationRecord.JobTitle ?? na;

        // Job icon
        if (_proto.TryIndex<JobIconPrototype>(stationRecord.JobIcon, out var proto))
        {
            PersonJobIcon.Texture = _spriteSystem.Frame0(proto.Icon);
        }

        PersonPrints.Text = stationRecord.Fingerprint ??  Loc.GetString("generic-not-available-shorthand");
        PersonDna.Text = stationRecord.DNA ??  Loc.GetString("generic-not-available-shorthand");

        PersonContainer.Visible = true;
    }
    
    private void PopulateRecordListing(Dictionary<uint, string>? listing)
    {
        if (listing == null)
        {
            RecordListing.Clear();
            return;
        }

        var entries = listing.ToList();
        entries.Sort((a, b) => string.Compare(a.Value, b.Value, StringComparison.Ordinal));
        // `entries` now contains the definitive list of items which should be in
        // our list of records and is in the order we want to present those items.

        // Walk through the existing items in RecordListing and in the updated listing
        // in parallel to synchronize the items in RecordListing with `entries`.
        int i = RecordListing.Count - 1;
        int j = entries.Count - 1;
        while (i >= 0 && j >= 0)
        {
            var strcmp = string.Compare(RecordListing[i].Text, entries[j].Value, StringComparison.Ordinal);
            if (strcmp == 0)
            {
                // This item exists in both RecordListing and `entries`. Nothing to do.
                i--;
                j--;
            }
            else if (strcmp > 0)
            {
                // Item exists in RecordListing, but not in `entries`. Remove it.
                RecordListing.RemoveAt(i);
                i--;
            }
            else if (strcmp < 0)
            {
                // A new entry which doesn't exist in RecordListing. Create it.
                RecordListing.Insert(i + 1, new ItemList.Item(RecordListing){Text = entries[j].Value, Metadata = entries[j].Key});
                j--;
            }
        }

        // Any remaining items in RecordListing don't exist in `entries`, so remove them
        while (i >= 0)
        {
            RecordListing.RemoveAt(i);
            i--;
        }

        // And finally, any remaining items in `entries`, don't exist in RecordListing. Create them.
        while (j >= 0)
        {
            RecordListing.Insert(0, new ItemList.Item(RecordListing){ Text = entries[j].Value, Metadata = entries[j].Key });
            j--;
        }
    }
}