using System;
using System.Numerics;
using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Graphics;
using Robust.Shared.Prototypes;
using Robust.Shared.Input;
using Range = Robust.Client.UserInterface.Controls.Range;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Shared.Atmos;
using static Content.Shared.Atmos.Components.GasAnalyzerComponent;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client._Funkystation.Atmos.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedBluespaceSenderComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class BluespaceSenderWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action<int>? RetrieveButtonPressed;
        public event Action? ToggleStatusButtonPressed;
        public event Action? RetrieveModeButtonPressed;
        
        public BluespaceSenderWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            ToggleStatusButton.OnPressed += _ => ToggleStatusButtonPressed?.Invoke();
            RetrieveModeButton.OnPressed += _ => RetrieveModeButtonPressed?.Invoke();
        }

        public void BuildGasList(List<bool>? retrievingGases, GasMixture? bluespaceGasMixture)
        {
            GasListBox.Children.Clear();

            if (bluespaceGasMixture == null || bluespaceGasMixture.TotalMoles < 0.01)
            {
                var GasBox = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    HorizontalExpand = true,
                    Margin = new Thickness(10, 10)
                };
                var NoGasMessage = new Label
                {
                    Text = "There are no gases in the network"
                };

                GasBox.Children.Add(NoGasMessage);
                GasListBox.Children.Add(GasBox);
            }
            else
            {
                int colorSwap = 1;
                for (var i = 0; i < Atmospherics.TotalNumberOfGases-1; i++)
                {
                    int index = i;
                    var gasName = Enum.GetName(typeof(Gas), index) ?? "Unknown Gas";

                    float moles = bluespaceGasMixture.GetMoles(index);

                    if (moles > 0f)
                    {
                        colorSwap *= -1;
                        var GasPanel = new PanelContainer
                        {
                            PanelOverride = new StyleBoxFlat(colorSwap == 1 ? Color.FromHex("#1B1B1E"):Color.FromHex("#202025"))
                        };

                        var GasBox = new BoxContainer
                        {
                            Orientation = LayoutOrientation.Vertical,
                            HorizontalExpand = true,
                            Margin = new Thickness(10, 10)
                        };

                        var TopRow = new BoxContainer
                        {
                            Orientation = LayoutOrientation.Horizontal
                        };

                        var GasName = new Label
                        {
                            Text = $"{gasName}"
                        };

                        var GasAmount = new Label
                        {
                            Name = "GasAmount",
                            Text = $"{moles.ToString("F2")} moles"
                        };
                        
                        var RetrieveButton = new Button
                        {
                            Name = "RetrieveButton",
                            Text = "Retrieve",
                            Pressed = retrievingGases != null && retrievingGases[index] ? true : false
                        };

                        RetrieveButton.OnPressed += _ => RetrieveButtonPressed?.Invoke(index);

                        TopRow.Children.Add(GasName);
                        TopRow.Children.Add(new Control { HorizontalExpand = true });
                        TopRow.Children.Add(GasAmount);

                        GasBox.Children.Add(TopRow);
                        GasBox.Children.Add(RetrieveButton);

                        GasPanel.Children.Add(GasBox);
                        GasListBox.Children.Add(GasPanel);
                    }
                }
            }
        }

        public void SetActive(bool active)
        {
            if (!active)
            {
                ToggleStatusButton.Text = Loc.GetString("On");
                ToggleStatusButton.Pressed = true;
            }
            else
            {
                ToggleStatusButton.Text = Loc.GetString("Off");
                ToggleStatusButton.Pressed = false;
            }
        }

        public void SetRetrievingMode(bool retrieving)
        {
            if (!retrieving)
            {
                RetrieveModeButton.Pressed = false;
            }
            else
            {
                RetrieveModeButton.Pressed = true;
            }
        }
    }
}
