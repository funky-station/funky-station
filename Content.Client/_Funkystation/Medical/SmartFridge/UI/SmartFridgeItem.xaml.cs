using Content.Client.Stylesheets;
using Content.Shared._Funkystation.Medical.SmartFridge;
using Content.Shared.FixedPoint;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Funkystation.Medical.SmartFridge.UI;

[GenerateTypedNameReferences]
public sealed partial class SmartFridgeItem : PanelContainer
{
    public List<DispenseButton> DispenseButtons;
    public event Action<BaseButton.ButtonEventArgs, DispenseButton>? OnItemSelected;
    public SmartFridgeItem(EntProtoId entProto, EntityUid uid, int index, string name, FixedPoint2 quantity, bool addDispenseButtons)
    {
        RobustXamlLoader.Load(this);

        //this calls the separated button builder, and stores the return to render after labels
        //var dispenseButtonConstructors = CreateDispenseButtons(index, addDispenseButtons);

        ItemPrototype.SetPrototype(entProto);
        NameLabel.Text = name;
        NameQuantity.Text = $"{quantity}";

        // Adds the dispense buttons after
        /*foreach (var dispenseButton in dispenseButtonConstructors)
        {
            PrimaryContainer.AddChild(dispenseButton);
        }

        SetBackgroundColor(index);
        DispenseButtons = dispenseButtonConstructors;*/

        DispenseButtons = new List<DispenseButton>();
    }

    public List<DispenseButton> GetDispenseButtons(EntProtoId entProto, EntityUid uid, int index, string name, FixedPoint2 quantity, bool addDispenseButtons)
    {
        var dispenseButtonConstructors = CreateDispenseButtons(index, addDispenseButtons);

        foreach (var dispenseButton in dispenseButtonConstructors)
        {
            PrimaryContainer.AddChild(dispenseButton);
        }

        SetBackgroundColor(index);
        DispenseButtons = dispenseButtonConstructors;

        return dispenseButtonConstructors;
    }

    /// <summary>
    /// sets alternating background colors for each row, based off of the item's index
    /// </summary>
    private void SetBackgroundColor(int index)
    {
        var rowColor1 = Color.FromHex("#1B1B1E");
        var rowColor2 = Color.FromHex("#202025");
        var currentRowColor = (index % 2 == 1) ? rowColor1 : rowColor2;

        ParentContainer.PanelOverride = new StyleBoxFlat(currentRowColor);
    }

    private DispenseButton MakeDispenseButton(string text, FridgeAmount amount, int index, string styleClass)
    {
        var button = new DispenseButton(text, amount, index, styleClass);

        button.OnPressed += args
            => OnItemSelected?.Invoke(args, button);
        // is this the problem?????? how

        return button;
    }

    /// <summary>
    /// Conditionally generates a set of dispenser buttons based on the supplied boolean argument.
    /// </summary>
    private List<DispenseButton> CreateDispenseButtons(int index, bool addDispenseButtons)
    {
        if (!addDispenseButtons)
            return new List<DispenseButton>(); // Return an empty list if addDispenseButton creation is disabled.

        var buttonConfigs = new (string text, FridgeAmount amount, string styleClass)[]
        {
            ("1", FridgeAmount.E1, StyleBase.ButtonOpenRight),
            ("2", FridgeAmount.E2, StyleBase.ButtonOpenBoth),
            ("5", FridgeAmount.E5, StyleBase.ButtonOpenBoth),
            ("10", FridgeAmount.E10, StyleBase.ButtonOpenBoth),
            ("15", FridgeAmount.E15, StyleBase.ButtonOpenBoth),
            (Loc.GetString("chem-master-window-buffer-all-amount"), FridgeAmount.All, StyleBase.ButtonOpenLeft),
        };
        var buttons = new List<DispenseButton>();

        foreach (var (text, amount, styleClass) in buttonConfigs)
        {
            var dispenseButton = MakeDispenseButton(text, amount, index, styleClass);
            buttons.Add(dispenseButton);
        }

        return buttons;
    }

    public sealed class DispenseButton : Button
    {
        public FridgeAmount Amount { get; set; }
        public int Index { get; set; }
        public DispenseButton(string text, FridgeAmount amount, int index, string styleClass)
        {
            AddStyleClass(styleClass);
            Text = text;
            Amount = amount;
            Index = index;
        }
    }
}
