using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._Funkystation.Printer.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Funkystation.Printer.UI;

[GenerateTypedNameReferences]
public sealed partial class PrintingDeviceWindow : DefaultWindow
{
    public event Action? TemplateSelectorPressed;
    public event Action? PrintButtonPressed;
    public string? SelectedId;
    public Dictionary<string, LineEdit>? Entries = new();
    
    public PrintingDeviceWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        TemplateSelector.OnPressed += _ => TemplateSelectorPressed?.Invoke();
        PrintButton.OnPressed += _ => PrintButtonPressed?.Invoke();
    }

    public void Populate(List<DocumentTemplatePrototype> documentTemplates) 
    {
        TemplateSelector.Clear();
        PrintButton.Disabled = true;
        Entries?.Clear();
        
        foreach (var documentTemplate in documentTemplates)
        {
            TemplateSelector.AddItem(documentTemplate.TemplateName);
            TemplateSelector.SetItemMetadata(TemplateSelector.ItemCount - 1, documentTemplate.ID);
        }

        if (TemplateSelector.SelectedMetadata == null) return;
        
        SelectedId = (string) TemplateSelector.SelectedMetadata;
        PrintButton.Disabled = false;
    }

    public BoxContainer CreateField(string fieldId, string fieldTitle)
    {
        var container = new BoxContainer();
        var textLabel = new RichTextLabel();
        var newField = new LineEdit();

        container.Orientation = BoxContainer.LayoutOrientation.Vertical;
        container.VerticalExpand = true;
        container.VerticalAlignment = VAlignment.Stretch;
        
        newField.PlaceHolder = fieldTitle;
        textLabel.Text = fieldTitle;

        newField.Editable = true;
        textLabel.HorizontalExpand = true;
        
        container.AddChild(textLabel);
        container.AddChild(newField);
        
        Entries?.Add(fieldId, newField);

        return container;
    }

    public Dictionary<string, string> GetAllFieldEntries()
    {
        var dict = new Dictionary<string, string>();
        
        foreach (var field in Entries!)
        {
            dict.Add(field.Key, field.Value.Text);
        }

        return dict;
    }

    public void PopulateFields(Dictionary<string, string> fields)
    {
        TemplateContainer.RemoveAllChildren();
        
        foreach (var field in fields)
        {
            var newField = CreateField(field.Key, field.Value);
            
            TemplateContainer.AddChild(newField);
        }
    }
}