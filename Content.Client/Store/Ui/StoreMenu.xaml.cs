// SPDX-FileCopyrightText: 2022 Alex Evgrashin <aevgrashin@yandex.ru>
// SPDX-FileCopyrightText: 2022 Leon Friedrich <60421075+ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 Repo <47093363+Titian3@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 deltanedas <39013340+deltanedas@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 deltanedas <@deltanedas:kde.org>
// SPDX-FileCopyrightText: 2024 Fildrance <fildrance@gmail.com>
// SPDX-FileCopyrightText: 2024 J. Brown <DrMelon@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 MilenVolf <63782763+MilenVolf@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Nemanja <98561806+EmoGarbage404@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 Tadeo <td12233a@gmail.com>
// SPDX-FileCopyrightText: 2024 keronshb <54602815+keronshb@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 username <113782077+whateverusername0@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 whateverusername0 <whateveremail>
// SPDX-FileCopyrightText: 2025 Tyranex <bobthezombie4@gmail.com>
// SPDX-FileCopyrightText: 2025 V <97265903+formlessnameless@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 jackel234 <jackel234@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 taydeo <td12233a@gmail.com>
//
// SPDX-License-Identifier: MIT

using System.Linq;
using Content.Client.Actions;
using Content.Client.Message;
using Content.Shared.FixedPoint;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.ResourceManagement;
using Content.Client.MalfAI.Theme;

namespace Content.Client.Store.Ui;

[GenerateTypedNameReferences]
public sealed partial class StoreMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    [Dependency] private readonly IResourceCache _resCache = default!;

    private StoreWithdrawWindow? _withdrawWindow;

    private Font? _malfFont;
    private bool _malfThemeApplied;
    private static readonly Color MalfGreen = MalfUiTheme.Accent;
    private StyleBox? _malfButtonStyle;

    public event EventHandler<string>? SearchTextUpdated;
    public event Action<BaseButton.ButtonEventArgs, ListingData>? OnListingButtonPressed;
    public event Action<BaseButton.ButtonEventArgs, string>? OnCategoryButtonPressed;
    public event Action<BaseButton.ButtonEventArgs, string, int>? OnWithdrawAttempt;
    public event Action<BaseButton.ButtonEventArgs>? OnRefundAttempt;

    public Dictionary<ProtoId<CurrencyPrototype>, FixedPoint2> Balance = new();
    public string CurrentCategory = string.Empty;

    private List<ListingData> _cachedListings = new();

    public StoreMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        WithdrawButton.OnButtonDown += OnWithdrawButtonDown;
        RefundButton.OnButtonDown += OnRefundButtonDown;
        SearchBar.OnTextChanged += _ => SearchTextUpdated?.Invoke(this, SearchBar.Text);
    }

    public void ApplyMalfTheme()
    {
        if (_malfThemeApplied)
            return;

        _malfThemeApplied = true;

        // Load font
        _malfFont ??= MalfUiTheme.GetFont(_resCache, 12);

        // Backdrop goes black for Malf shop (no static - will be added as overlay)
        RootBackdrop.PanelOverride = MalfUiTheme.CreateBackdropStyle();

        // Add scrolling error backdrop behind all UI elements - insert at beginning so it appears behind
        var errorBackdrop = MalfEffectOverlay.CreateErrorBackdrop();
        RootBackdrop.AddChild(errorBackdrop);
        errorBackdrop.SetPositionInParent(0);

        // Add CRT static overlay using AI statics fog of war shader - this stays on top
        var staticOverlay = MalfEffectOverlay.CreateStaticOverlay();
        RootBackdrop.AddChild(staticOverlay);

        // Apply green-outlined black panels
        var borderMain = MalfUiTheme.CreateMainPanelStyle(MalfUiTheme.Accent);
        MainPanel.PanelOverride = borderMain;

        var borderCat = MalfUiTheme.CreateCategoryPanelStyle(MalfUiTheme.Accent);
        CategoryPanel.PanelOverride = borderCat;

        // Apply color to common controls
        BalanceInfo.Modulate = MalfGreen;

        // Apply Malf stylesheet
        RootBackdrop.Stylesheet = MalfUiTheme.GetCachedStylesheet(_resCache, 12);

        // Apply specific styling for the search bar
        SearchBar.StyleBoxOverride = MalfUiTheme.CreateButtonStyle(MalfUiTheme.Accent);

        // Create and apply green-bordered black style for buttons WITHOUT static (static comes from backdrop overlay)
        _malfButtonStyle ??= MalfUiTheme.CreateButtonStyle(MalfUiTheme.Accent);

        // Hide withdraw in the CPU/Malf store.
        WithdrawButton.Visible = false;

        RefundButton.StyleBoxOverride = _malfButtonStyle;
    }

    public void UpdateBalance(Dictionary<ProtoId<CurrencyPrototype>, FixedPoint2> balance)
    {
        Balance = balance;

        var currency = balance.ToDictionary(type =>
            (type.Key, type.Value), type => _prototypeManager.Index(type.Key));

        var balanceStr = string.Empty;
        foreach (var ((_, amount), proto) in currency)
        {
            balanceStr += Loc.GetString("store-ui-balance-display", ("amount", amount),
                ("currency", Loc.GetString(proto.DisplayName, ("amount", 1)))) + "\n";
        }

        BalanceInfo.SetMarkup(balanceStr.TrimEnd());

        var disabled = true;
        foreach (var type in currency)
        {
            if (type.Value.CanWithdraw && type.Value.Cash != null && type.Key.Item2 > 0)
            {
                disabled = false;
                break;
            }
        }

        WithdrawButton.Disabled = disabled;
    }

    public void UpdateListing(List<ListingData> listings)
    {
        _cachedListings = listings;
        UpdateListing();
    }

    public void UpdateListing()
    {
        var sorted = _cachedListings.OrderBy(l => l.Priority).ThenBy(l => l.Cost.Values.Sum());

        // should probably chunk these out instead. to-do if this clogs the internet tubes.
        // maybe read clients prototypes instead?
        ClearListings();
        foreach (var item in sorted)
        {
            AddListingGui(item);
        }
    }

    public void SetFooterVisibility(bool visible)
    {
        TraitorFooter.Visible = visible;
    }

    private void OnWithdrawButtonDown(BaseButton.ButtonEventArgs args)
    {
        // check if window is already open
        if (_withdrawWindow != null && _withdrawWindow.IsOpen)
        {
            _withdrawWindow.MoveToFront();
            return;
        }

        // open a new one
        _withdrawWindow = new StoreWithdrawWindow();
        _withdrawWindow.OpenCentered();

        _withdrawWindow.CreateCurrencyButtons(Balance);
        _withdrawWindow.OnWithdrawAttempt += OnWithdrawAttempt;
    }

    private void OnRefundButtonDown(BaseButton.ButtonEventArgs args)
    {
        OnRefundAttempt?.Invoke(args);
    }

    private void AddListingGui(ListingData listing)
    {
	// Apply category filtering for both Malf and normal shops.
        if (!listing.Categories.Contains(CurrentCategory))
            return;

        var listingPrice = listing.Cost;
        var hasBalance = HasListingPrice(Balance, listingPrice);

        var spriteSys = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();

        Texture? texture = null;
        if (listing.Icon != null)
            texture = spriteSys.Frame0(listing.Icon);

        if (listing.ProductEntity != null)
        {
            if (texture == null)
                texture = spriteSys.GetPrototypeIcon(listing.ProductEntity).Default;
        }
        else if (listing.ProductAction != null)
        {
            if (texture == null)
            {
                var actionId = _entityManager.Spawn(listing.ProductAction);
                if (_entityManager.System<ActionsSystem>().TryGetActionData(actionId, out var action) &&
                    action.Icon != null)
                {
                    texture = spriteSys.Frame0(action.Icon);
                }
            }
        }

        if (_malfThemeApplied && _malfFont != null)
        {
            var malfListing = new MalfStoreListingControl(listing, GetListingPriceString(listing), hasBalance, texture, _malfFont, MalfGreen);

            // Apply sale-red first so theming can respect it.
            if (listing.DiscountValue > 0) // WD EDIT
                malfListing.StoreItemBuyButton.AddStyleClass("ButtonColorRed");

            malfListing.StoreItemBuyButton.OnButtonDown += args
                => OnListingButtonPressed?.Invoke(args, listing);

            StoreListingsContainer.AddChild(malfListing);
        }
        else
        {
            var newListing = new StoreListingControl(listing, GetListingPriceString(listing), hasBalance, texture);

            // Apply sale-red first so theming can respect it.
            if (listing.DiscountValue > 0) // WD EDIT
                newListing.StoreItemBuyButton.AddStyleClass("ButtonColorRed");

            newListing.StoreItemBuyButton.OnButtonDown += args
                => OnListingButtonPressed?.Invoke(args, listing);

            StoreListingsContainer.AddChild(newListing);
        }
    }

    public bool HasListingPrice(Dictionary<ProtoId<CurrencyPrototype>, FixedPoint2> currency, Dictionary<ProtoId<CurrencyPrototype>, FixedPoint2> price)
    {
        foreach (var type in price)
        {
            if (!currency.ContainsKey(type.Key))
                return false;

            if (currency[type.Key] < type.Value)
                return false;
        }
        return true;
    }

    public string GetListingPriceString(ListingData listing)
    {
        var text = string.Empty;
        if (listing.Cost.Count < 1)
            text = Loc.GetString("store-currency-free");
        else
        {
            foreach (var (type, amount) in listing.Cost)
            {
                var currency = _prototypeManager.Index(type);
                text += Loc.GetString("store-ui-price-display", ("amount", amount),
                    ("currency", Loc.GetString(currency.DisplayName, ("amount", amount))));
            }
        }

        return text.TrimEnd();
    }

    private void ClearListings()
    {
        StoreListingsContainer.Children.Clear();
    }

    public void PopulateStoreCategoryButtons(HashSet<ListingData> listings)
    {
        // Malf shop: show only the requested categories.
        if (_malfThemeApplied)
        {
            var malfCats = new[] { "Deception", "Factory", "Disruption" };

            // Default selection for Malf shop
            if (!malfCats.Contains(CurrentCategory))
                CurrentCategory = "Deception";

            CategoryListContainer.Children.Clear();

            var group = new ButtonGroup();
            foreach (var id in malfCats)
            {
                // Localize the visible label for each Malf category
                var textKey = id switch
                {
                    "Deception" => "malf-store-category-deception",
                    "Factory" => "malf-store-category-factory",
                    "Disruption" => "malf-store-category-disruption",
                    _ => "malf-store-category-deception"
                };

                var catButton = new StoreCategoryButton
                {
                    Text = Loc.GetString(textKey),
                    Id = id,
                    Pressed = id == CurrentCategory,
                    Group = group,
                    ToggleMode = true,
                    StyleClasses = { "OpenBoth" }
                };

                if (_malfButtonStyle != null)
                    catButton.StyleBoxOverride = _malfButtonStyle;

                catButton.OnPressed += args => OnCategoryButtonPressed?.Invoke(args, catButton.Id);
                CategoryListContainer.AddChild(catButton);
            }

            return;
        }

        // Normal shop: original behavior, collect categories from listings.
        var allCategories = new List<StoreCategoryPrototype>();
        foreach (var listing in listings)
        {
            foreach (var cat in listing.Categories)
            {
                var proto = _prototypeManager.Index(cat);
                if (!allCategories.Contains(proto))
                    allCategories.Add(proto);
            }
        }

        allCategories = allCategories.OrderBy(c => c.Priority).ToList();

        // This will reset the Current Category selection if nothing matches the search.
        if (allCategories.All(category => category.ID != CurrentCategory))
            CurrentCategory = string.Empty;

        if (CurrentCategory == string.Empty && allCategories.Count > 0)
            CurrentCategory = allCategories.First().ID;

        CategoryListContainer.Children.Clear();
        if (allCategories.Count < 1)
            return;

        var normalGroup = new ButtonGroup();
        foreach (var proto in allCategories)
        {
            var catButton = new StoreCategoryButton
            {
                Text = Loc.GetString(proto.Name),
                Id = proto.ID,
                Pressed = proto.ID == CurrentCategory,
                Group = normalGroup,
                ToggleMode = true,
                StyleClasses = { "OpenBoth" }
            };

            catButton.OnPressed += args => OnCategoryButtonPressed?.Invoke(args, catButton.Id);
            CategoryListContainer.AddChild(catButton);
        }
    }

    public override void Close()
    {
        base.Close();
        _withdrawWindow?.Close();
    }

    public void UpdateRefund(bool allowRefund)
    {
        RefundButton.Visible = allowRefund;
    }

    private sealed class StoreCategoryButton : Button
    {
        public string? Id;
    }
}
