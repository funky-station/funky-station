// SPDX-FileCopyrightText: 2025 ilyamikcoder <me@ilyamikcoder.com>
// SPDX-FileCopyrightText: 2025 taydeo <td12233a@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later AND MIT

using Content.Client.Stylesheets;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;
using System.Linq;

namespace Content.Client._Funkystation.Access.UI;

[GenerateTypedNameReferences]
public sealed partial class IdCardConsoleIconSelectorWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private readonly SpriteSystem _spriteSystem;
    private const int JobIconColumnCount = 10;
    public event Action<JobIconPrototype>? OnJobIconChanged;
    public string JobIcon;

    [ValidatePrototypeId<JobIconPrototype>]
    private const string JobIconForNoId = "JobIconNoId";
    public IdCardConsoleIconSelectorWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();

        OnJobIconChanged += jobIcon => JobIcon = jobIcon.ID;

        JobIcon = JobIconForNoId;
    }

    public void SetJobIcon(string? jobIcon) {
        if(jobIcon != null) {
            JobIcon = jobIcon;
        } else {
            JobIcon = JobIconForNoId;
        }
        SetAllowedIcons();
    }

    public void SetAllowedIcons()
    {
        IconGrid.DisposeAllChildren();
        var jobIconButtonGroup = new ButtonGroup();
        var i = 0;
        var icons = _prototypeManager.EnumeratePrototypes<JobIconPrototype>().Where(icon => icon.AllowSelection && icon.AllowIdConsole).ToList();
        icons.Sort((x, y) => string.Compare(x.LocalizedJobName, y.LocalizedJobName, StringComparison.CurrentCulture));
        foreach (var jobIcon in icons)
        {
            var styleBase = StyleBase.ButtonOpenBoth;
            var modulo = i % JobIconColumnCount;
            if (modulo == 0)
                styleBase = StyleBase.ButtonOpenRight;
            else if (modulo == JobIconColumnCount - 1)
                styleBase = StyleBase.ButtonOpenLeft;
            // Generate buttons
            var jobIconButton = new Button
            {
                Access = AccessLevel.Public,
                StyleClasses = { styleBase },
                MaxSize = new Vector2(42, 28),
                Group = jobIconButtonGroup,
                Pressed = JobIcon == jobIcon.ID,
                ToolTip = jobIcon.LocalizedJobName
            };
            // Generate buttons textures
            var jobIconTexture = new TextureRect
            {
                Texture = _spriteSystem.Frame0(jobIcon.Icon),
                TextureScale = new Vector2(2.5f, 2.5f),
                Stretch = TextureRect.StretchMode.KeepCentered,
            };
            jobIconButton.AddChild(jobIconTexture);
            jobIconButton.OnPressed += _ => OnJobIconChanged?.Invoke(jobIcon);
            IconGrid.AddChild(jobIconButton);
            i++;
        }
    }
}
