using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.VendingMachines.UI;
using Content.Shared._Funkystation.Medical.SmartFridge;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.Labels.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client._Funkystation.Medical.SmartFridge.UI;


[GenerateTypedNameReferences]
public sealed partial class SmartFridgeMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly Dictionary<EntProtoId, EntityUid> _dummies = [];

    public event Action<GUIBoundKeyEventArgs, ListData>? OnItemSelected;
    public event Action<BaseButton.ButtonEventArgs, DispenseButton>? OnDispenseButtonPressed;

    /// <summary>
    /// create and initialize the ui, client side
    /// </summary>
    public SmartFridgeMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        VendingContents.SearchBar = SearchBar;
        //VendingContents.DataFilterCondition += DataFilterCondition;
        //VendingContents.GenerateItem += GenerateButton;
        VendingContents.ItemKeyBindDown += (args, data) => OnItemSelected?.Invoke(args, data);

        // TODO add something to set max label size please

        // set tab names
        Tabs.SetTabTitle(0, Loc.GetString("smart-fridge-all-tab"));
        Tabs.SetTabTitle(1, Loc.GetString("smart-fridge-pills-tab"));
        Tabs.SetTabTitle(2, Loc.GetString("smart-fridge-bottles-tab"));
        Tabs.SetTabTitle(3, Loc.GetString("smart-fridge-patches-tab"));
    }

    private static bool DataFilterCondition(string filter, ListData data)
    {
        if (data is not VendorItemsListData { ItemText: var text })
            return false;

        return string.IsNullOrEmpty(filter) || text.Contains(filter, StringComparison.CurrentCultureIgnoreCase);
    }

    private DispenseButton MakeDispenseButton(string text, FridgeAmount amount, string styleClass)
    {
        var button = new DispenseButton(text, amount, styleClass);
        button.OnPressed += args
            => OnDispenseButtonPressed?.Invoke(args, button);
        return button;
    }

    /// <summary>
    /// Conditionally generates a set of dispenser buttons based on the supplied boolean argument.
    /// </summary>
    private List<DispenseButton> CreateDispenseButtons(bool addDispenseButtons)
    {
        if (!addDispenseButtons)
            return new List<DispenseButton>(); // Return an empty list if reagentTransferButton creation is disabled.

        var buttonConfigs = new (string text, FridgeAmount amount, string styleClass)[]
        {
            ("1", FridgeAmount.E1, StyleBase.ButtonOpenRight),
            ("2", FridgeAmount.E2, StyleBase.ButtonOpenBoth),
            ("5", FridgeAmount.E5, StyleBase.ButtonOpenBoth),
            ("10", FridgeAmount.E10, StyleBase.ButtonOpenBoth),
            ("15", FridgeAmount.E15, StyleBase.ButtonOpenBoth),
            (Loc.GetString("chem-master-window-buffer-all-amount"), FridgeAmount.All, StyleBase.ButtonOpenLeft),
        };
        var buttons = new List<DispenseButton>();

        foreach (var (text, amount, styleClass) in buttonConfigs)
        {
            var dispenseButton = MakeDispenseButton(text, amount, styleClass);
            buttons.Add(dispenseButton);
        }

        return buttons;
    }

    /// <summary>
    /// updates inventory panel
    /// </summary>
    public void Populate(SmartFridgeBoundUserInterfaceState state)
    {
        // out of stock labels
        if (!state.FridgeInventory.Any() && VendingContents.Visible)
        {
            SearchBar.Visible = false;
            VendingContents.Visible = false;

            var outOfStockLabel = new Label
            {
                Text = Loc.GetString("vending-machine-component-try-eject-out-of-stock"),
                Margin = new Thickness(4, 4),
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Top,
                HorizontalAlignment = HAlignment.Center,
            };

            ContainerContents.AddChild(outOfStockLabel);

            SetSizeAfterUpdate(outOfStockLabel.Text.Length, 0);

            return;
        }

        // initialises rowCount to allow for striped rows
        var rowCount = 0;

        // probably fucking none of this right
        for (var i = 0; i < state.FridgeInventoryAmount; i++)
        {
            var entry = state.FridgeInventory[i];
            if (!_prototypeManager.TryIndex(entry.Id, out var prototype))
                continue;

            if (!_dummies.TryGetValue(entry.Id, out var dummy))
            {
                dummy = _entityManager.Spawn(entry.Id);
                _dummies.Add(entry.Id, dummy);
            }

            var name = entry.ItemName;
            var quantity = entry.Quantity;

            VendingContents.Children.Add(BuildItemRow(rowCount++, name, prototype, quantity, true));
            // listData.Add(new VendorItemsListData(prototype.ID, name, i));
        }
        // VendingContents.PopulateList(listData)
    }

    private Control BuildItemRow(int rowCount, string name, EntityPrototype prototype, FixedPoint2 quantity, bool addReagentButtons)
        {
            var rowColor1 = Color.FromHex("#1B1B1E");
            var rowColor2 = Color.FromHex("#202025");
            var currentRowColor = (rowCount % 2 == 1) ? rowColor1 : rowColor2;

            //this calls the separated button builder, and stores the return to render after labels
            var reagentButtonConstructors = CreateDispenseButtons(addReagentButtons);

            // Create the row layout with the color panel
            var rowContainer = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                Children =
                {
                    // prototype.ID here as a textureRect...?
                    new Label { Text = $"{name}: " },
                    new Label
                    {
                        Text = $"{quantity}",
                        StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                    },

                    // Padding
                    new Control { HorizontalExpand = true },
                }
            };

            // Add the reagent buttons after the color panel
            foreach (var reagentTransferButton in reagentButtonConstructors)
            {
                rowContainer.AddChild(reagentTransferButton);
            }
            //Apply panelContainer to allow for striped rows
            return new PanelContainer
            {
                PanelOverride = new StyleBoxFlat(currentRowColor),
                Children = { rowContainer }
            };
        }

    private void SetSizeAfterUpdate(int longestEntryLength, int contentCount)
    {
        SetSize = new Vector2(Math.Clamp((longestEntryLength + 2) * 12, 250, 400),
            Math.Clamp(contentCount * 50, 150, 350));
    }

    public sealed class DispenseButton : Button
    {
        public FridgeAmount Amount { get; set; }
        public DispenseButton(string text, FridgeAmount amount, string styleClass)
        {
            AddStyleClass(styleClass);
            Text = text;
            Amount = amount;
        }
    }
}

