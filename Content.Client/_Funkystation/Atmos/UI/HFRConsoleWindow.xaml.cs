using Content.Shared._Funkystation.Atmos.Prototypes;
using Content.Client.UserInterface.Controls;
using Content.Shared._Funkystation.Atmos;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared._Funkystation.Atmos.Components;
using System.Numerics;
using Robust.Client.Graphics;
using Robust.Shared.Maths;
using System.Linq;
using Robust.Client.ResourceManagement;

namespace Content.Client._Funkystation.Atmos.UI;

[GenerateTypedNameReferences]
public sealed partial class HFRConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private EntityUid? _owner;
    private HFRConsoleBoundInterfaceState? _currentState;

    public bool Active { get; private set; }
    public bool Cooling { get; private set; }
    public bool FuelInjecting { get; private set; }
    public bool ModeratorInjecting { get; private set; }
    public bool WasteRemoving { get; private set; }
    public float FuelInputRate { get; private set; }
    public float ModeratorInputRate { get; private set; }
    public float HeatingConductor { get; private set; }
    public int CoolingVolume { get; private set; }
    public float MagneticConstrictor { get; private set; }
    public float CurrentDamper { get; private set; }
    public float ModeratorFilteringRate { get; private set; }
    public int PowerLevel { get; private set; }
    public HashSet<Gas> FilterGases { get; private set; } = new();

    public Action<float>? OnSetFuelInputRate { get; set; }
    public Action<float>? OnSetModeratorInputRate { get; set; }
    public Action<float>? OnSetHeatingConductor { get; set; }
    public Action<int>? OnSetCoolingVolume { get; set; }
    public Action<float>? OnSetMagneticConstrictor { get; set; }
    public Action<float>? OnSetCurrentDamper { get; set; }
    public Action<float>? OnSetModeratorFilteringRate { get; set; }
    public Action<string?>? OnSelectRecipe { get; set; }
    public Action<HashSet<Gas>>? OnSetFilterGases { get; set; }

    private readonly Dictionary<Button, string> _recipeButtons = new();
    private readonly Dictionary<Button, PanelContainer> _recipePanels = new();
    private readonly Dictionary<Button, bool> _recipePanelIsDark = new();
    private Button? _selectedButton;
    private readonly Dictionary<Gas, Button> _gasControls = new();

    private static readonly Dictionary<string, string> GasAbbreviations = new()
    {
        { "Ammonia", "NH\u2083" },
        { "CarbonDioxide", "CO\u2082" },
        { "Frezon", "Frezon" },
        { "Nitrogen", "N\u2082" },
        { "NitrousOxide", "N\u2082O" },
        { "Oxygen", "O\u2082" },
        { "Plasma", "Plasma" },
        { "Tritium", "Tritium" },
        { "WaterVapor", "H\u2082O" },
        { "BZ", "BZ" },
        { "Healium", "Healium" },
        { "Nitrium", "Nitrium" },
        { "Pluoxium", "Pluox" },
        { "Hydrogen", "H\u2082" },
        { "HyperNoblium", "Hyper-Nob" },
        { "ProtoNitrate", "Proto-Nitrate" },
        { "Zauker", "Zauker" },
        { "Halon", "Halon" },
        { "Helium", "He" },
        { "AntiNoblium", "Anti-Nob" },
        { "Miasma", "Miasma" },
        { "Unknown", "X" }
    };

    private static readonly Dictionary<string, Color> GasColors = new()
    {
        { "Oxygen", Color.FromHex("#2887E8") },
        { "Nitrogen", Color.FromHex("#DA1010") },
        { "CarbonDioxide", Color.FromHex("#4E4E4E") },
        { "Plasma", Color.FromHex("#FF3300") },
        { "Tritium", Color.FromHex("#13FF4B") },
        { "WaterVapor", Color.FromHex("#BFFFFD") },
        { "Ammonia", Color.FromHex("#56941E") },
        { "NitrousOxide", Color.FromHex("#8F00FF") },
        { "Frezon", Color.FromHex("#3A758C") },
        { "BZ", Color.FromHex("#9370DB") },
        { "Healium", Color.FromHex("#FA8072") },
        { "Nitrium", Color.FromHex("#A52A2A") },
        { "Pluoxium", Color.FromHex("#7364FF") },
        { "Hydrogen", Color.FromHex("#FFFAF0") },
        { "HyperNoblium", Color.FromHex("#33CCCC") },
        { "ProtoNitrate", Color.FromHex("#009933") },
        { "Zauker", Color.FromHex("#006400") },
        { "Halon", Color.FromHex("#E3574D") },
        { "Helium", Color.FromHex("#FFE600") },
        { "AntiNoblium", Color.FromHex("#992C0B") },
        { "Miasma", Color.FromHex("#CBB413") },
        { "Unknown", Color.White }
    };

    private static readonly List<string> OrderedRecipeIds = new()
    {
        "plasmaO2FuelRecipe",
        "h2O2FuelRecipe",
        "t2O2FuelRecipe",
        "h2T2FuelRecipe",
        "hypernobHydrogenFuelRecipe",
        "hypernobTritFuelRecipe",
        "hypernobAntinobFuelRecipe"
    };

    private float LowerGraphTempValue = 3f;
    private float UpperGraphTempValue = 500f;
    private const float MaxBarHeight = 220f;
    private const float BaseMaxTemperature = 10000000f;

    public HFRConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var fontAwesome6FreeFontSolid = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/_Funkystation/FontAwesome6Free/fa-solid-900.ttf"), 11);
        var fontAwesome6FreeFontRegular = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/_Funkystation/FontAwesome6Free/fa-regular-400.ttf"), 11);

        NegativeTemperatureMultiplier.FontOverride = fontAwesome6FreeFontSolid;
        PositiveTemperatureMultiplier.FontOverride = fontAwesome6FreeFontSolid;
        EnergyConcentrationMultiplier.FontOverride = fontAwesome6FreeFontRegular;
        FuelConsumptionMultiplier.FontOverride = fontAwesome6FreeFontSolid;
        GasProductionMultiplier.FontOverride = fontAwesome6FreeFontSolid;
        TemperatureChangeMultiplier.FontOverride = fontAwesome6FreeFontSolid;

        TogglePowerButton.OnPressed += _ => OnTogglePowerButtonPressed();
        ToggleCoolingButton.OnPressed += _ => OnToggleCoolingButtonPressed();
        ToggleFuelInjectionButton.OnPressed += _ => OnToggleFuelInjectionButtonPressed();
        ToggleModeratorInjectionButton.OnPressed += _ => OnToggleModeratorInjectionButtonPressed();
        ToggleWasteRemoveButton.OnPressed += _ => OnToggleWasteRemoveButtonPressed();

        FuelInputRateSpinbox.OnValueChanged += args => OnSetFuelInputRate?.Invoke(args.Value);
        ModeratorInputRateSpinbox.OnValueChanged += args => OnSetModeratorInputRate?.Invoke(args.Value);
        HeatingConductorSpinBox.OnValueChanged += args => OnSetHeatingConductor?.Invoke(args.Value);
        CoolingVolumeSpinBox.OnValueChanged += args => OnSetCoolingVolume?.Invoke((int)args.Value);
        MagneticConstrictorSpinBox.OnValueChanged += args => OnSetMagneticConstrictor?.Invoke(args.Value);
        CurrentDamperSpinBox.OnValueChanged += args => OnSetCurrentDamper?.Invoke(args.Value);
        ModeratorFilteringRateSpinBox.OnValueChanged += args => OnSetModeratorFilteringRate?.Invoke(args.Value);

        SelectAllButton.OnPressed += _ => SelectAllGases();
        DeselectAllButton.OnPressed += _ => DeselectAllGases();
        InitializeGasControls();

        InitializeRecipeTable();
        UpdateFusionGasesContent(null);
    }

    private void InitializeGasControls()
    {
        var gasPrototypes = new List<(Gas Gas, GasPrototype Proto)>();

        foreach (var gasProto in _protoManager.EnumeratePrototypes<GasPrototype>())
        {
            if (!Enum.TryParse<Gas>(gasProto.ID, out var gas))
                continue;

            gasPrototypes.Add((gas, gasProto));
        }

        var sortedPrototypes = gasPrototypes.OrderBy(pair => (sbyte)pair.Gas).ToList();

        foreach (var (gas, gasProto) in sortedPrototypes)
        {
            var gasButton = new Button
            {
                Name = gasProto.ID,
                Text = Loc.GetString(gasProto.Name),
                ToggleMode = true,
                HorizontalExpand = true,
                Pressed = FilterGases.Contains(gas)
            };
            gasButton.OnToggled += args =>
            {
                if (args.Pressed)
                    FilterGases.Add(gas);
                else
                    FilterGases.Remove(gas);
                OnSetFilterGases?.Invoke(FilterGases);
            };
            _gasControls.Add(gas, gasButton);
            GasContainer.AddChild(gasButton);
        }
    }

    private void SelectAllGases()
    {
        FilterGases.Clear();
        foreach (var (gas, button) in _gasControls)
        {
            button.Pressed = true;
            FilterGases.Add(gas);
        }
        OnSetFilterGases?.Invoke(FilterGases);
    }

    private void DeselectAllGases()
    {
        foreach (var (_, button) in _gasControls)
        {
            button.Pressed = false;
        }
        FilterGases.Clear();
        OnSetFilterGases?.Invoke(FilterGases);
    }

    private void InitializeRecipeTable()
    {
        var notoSansDisplayFont = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);
        var fontAwesome6FreeFont = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/_Funkystation/FontAwesome6Free/fa-solid-900.ttf"), 11);

        int topMargin = 49;
        int rowIndex = 0;

        foreach (var recipeId in OrderedRecipeIds)
        {
            if (!_protoManager.TryIndex<FusionRecipePrototype>(recipeId, out var recipe))
                continue;

            string GetGasText(string gas) => GasAbbreviations.TryGetValue(gas, out var abbr) ? abbr : gas;
            Color? GetGasColor(string gas) => GasColors.TryGetValue(gas, out var color) ? color : (Color?)null;

            var isDark = rowIndex % 2 == 0;
            var panel = new PanelContainer
            {
                HorizontalExpand = true,
                SetHeight = 30,
                Margin = new Thickness(8, topMargin, 8, 0),
                VerticalAlignment = Control.VAlignment.Top,
                PanelOverride = isDark ? new StyleBoxFlat { BackgroundColor = Color.FromHex("#222222") } : null
            };
            DropdownTableBody.Children.Add(panel);

            var button = new Button
            {
                Text = " ",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                MinSize = new Vector2(30, 30),
                MaxSize = new Vector2(30, 30),
                Pressed = false
            };
            button.OnPressed += _ => SelectButton(button, recipe.ID);
            _recipeButtons.Add(button, recipe.ID);
            _recipePanels.Add(button, panel);
            _recipePanelIsDark.Add(button, isDark);
            SelectionBox.Children.Add(button);

            FuelPrimaryBox.Children.Add(new Label
            {
                Text = recipe.Requirements.Count > 0 ? GetGasText(recipe.Requirements[0]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.Requirements.Count > 0 ? GetGasColor(recipe.Requirements[0]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            FuelSecondaryBox.Children.Add(new Label
            {
                Text = recipe.Requirements.Count > 1 ? GetGasText(recipe.Requirements[1]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.Requirements.Count > 1 ? GetGasColor(recipe.Requirements[1]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });

            ByproductsSubfield1Box.Children.Add(new Label
            {
                Text = recipe.PrimaryProducts.Count > 0 ? GetGasText(recipe.PrimaryProducts[0]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.PrimaryProducts.Count > 0 ? GetGasColor(recipe.PrimaryProducts[0]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            ByproductsSubfield2Box.Children.Add(new Label
            {
                Text = recipe.PrimaryProducts.Count > 1 ? GetGasText(recipe.PrimaryProducts[1]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.PrimaryProducts.Count > 1 ? GetGasColor(recipe.PrimaryProducts[1]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });

            ProducedGasesTier1Box.Children.Add(new Label
            {
                Text = recipe.SecondaryProducts.Count > 0 ? GetGasText(recipe.SecondaryProducts[0]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.SecondaryProducts.Count > 0 ? GetGasColor(recipe.SecondaryProducts[0]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            ProducedGasesTier2Box.Children.Add(new Label
            {
                Text = recipe.SecondaryProducts.Count > 1 ? GetGasText(recipe.SecondaryProducts[1]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.SecondaryProducts.Count > 1 ? GetGasColor(recipe.SecondaryProducts[1]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            ProducedGasesTier3Box.Children.Add(new Label
            {
                Text = recipe.SecondaryProducts.Count > 2 ? GetGasText(recipe.SecondaryProducts[2]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.SecondaryProducts.Count > 2 ? GetGasColor(recipe.SecondaryProducts[2]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            ProducedGasesTier4Box.Children.Add(new Label
            {
                Text = recipe.SecondaryProducts.Count > 3 ? GetGasText(recipe.SecondaryProducts[3]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.SecondaryProducts.Count > 3 ? GetGasColor(recipe.SecondaryProducts[3]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            ProducedGasesTier5Box.Children.Add(new Label
            {
                Text = recipe.SecondaryProducts.Count > 4 ? GetGasText(recipe.SecondaryProducts[4]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.SecondaryProducts.Count > 4 ? GetGasColor(recipe.SecondaryProducts[4]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });
            ProducedGasesTier6Box.Children.Add(new Label
            {
                Text = recipe.SecondaryProducts.Count > 5 ? GetGasText(recipe.SecondaryProducts[5]) : "",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                FontColorOverride = recipe.SecondaryProducts.Count > 5 ? GetGasColor(recipe.SecondaryProducts[5]) : null,
                MinSize = new Vector2(0, 30),
                FontOverride = notoSansDisplayFont
            });

            EffectsSubfield1Box.Children.Add(new Label
            {
                Name = "NegativeTemperatureMultiplier",
                Text = recipe.NegativeTemperatureMultiplier == 1 ? "\uf068"
                    : recipe.NegativeTemperatureMultiplier < 1 ? recipe.NegativeTemperatureMultiplier < 0.5 ? "\uf103" : "\u2304"
                    : recipe.NegativeTemperatureMultiplier > 2 ? "\uf102" : "\u2303",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                MinSize = new Vector2(0, 30),
                FontOverride = fontAwesome6FreeFont
            });
            EffectsSubfield2Box.Children.Add(new Label
            {
                Name = "PositiveTemperatureMultiplier",
                Text = recipe.PositiveTemperatureMultiplier == 1 ? "\uf068"
                    : recipe.PositiveTemperatureMultiplier < 1 ? recipe.PositiveTemperatureMultiplier < 0.5 ? "\uf103" : "\u2304"
                    : recipe.PositiveTemperatureMultiplier > 2 ? "\uf102" : "\u2303",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                MinSize = new Vector2(0, 30),
                FontOverride = fontAwesome6FreeFont
            });
            EffectsSubfield3Box.Children.Add(new Label
            {
                Name = "EnergyConcentrationMultiplier",
                Text = recipe.EnergyConcentrationMultiplier == 1 ? "\uf068"
                    : recipe.EnergyConcentrationMultiplier < 1 ? recipe.EnergyConcentrationMultiplier < 0.5 ? "\uf103" : "\u2304"
                    : recipe.EnergyConcentrationMultiplier > 2 ? "\uf102" : "\u2303",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                MinSize = new Vector2(0, 30),
                FontOverride = fontAwesome6FreeFont
            });
            EffectsSubfield4Box.Children.Add(new Label
            {
                Name = "FuelConsumptionMultiplier",
                Text = recipe.FuelConsumptionMultiplier == 1 ? "\uf068"
                    : recipe.FuelConsumptionMultiplier < 1 ? recipe.FuelConsumptionMultiplier < 0.5 ? "\uf103" : "\u2304"
                    : recipe.FuelConsumptionMultiplier > 2 ? "\uf102" : "\u2303",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                MinSize = new Vector2(0, 30),
                FontOverride = fontAwesome6FreeFont
            });
            EffectsSubfield5Box.Children.Add(new Label
            {
                Name = "GasProductionMultiplier",
                Text = recipe.GasProductionMultiplier == 1 ? "\uf068"
                    : recipe.GasProductionMultiplier < 1 ? recipe.GasProductionMultiplier < 0.5 ? "\uf103" : "\u2304"
                    : recipe.GasProductionMultiplier > 2 ? "\uf102" : "\u2303",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                MinSize = new Vector2(0, 30),
                FontOverride = fontAwesome6FreeFont
            });
            EffectsSubfield6Box.Children.Add(new Label
            {
                Name = "TemperatureChangeMultiplier",
                Text = recipe.TemperatureChangeMultiplier == 1 ? "\uf068"
                    : recipe.TemperatureChangeMultiplier < 1 ? recipe.TemperatureChangeMultiplier < 0.5 ? "\uf103" : "\u2304"
                    : recipe.TemperatureChangeMultiplier > 2 ? "\uf102" : "\u2303",
                Margin = new Thickness(2, 0),
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                MinSize = new Vector2(0, 30),
                FontOverride = fontAwesome6FreeFont
            });

            topMargin += 30;
            rowIndex++;
        }
    }

    private void UpdateFusionGasesContent(string? recipeId)
    {
        FusionGasesContent.Children.Clear();

        if (recipeId == null || !_protoManager.TryIndex<FusionRecipePrototype>(recipeId, out var recipe))
        {
            FusionGasesContent.Children.Add(new Label
            {
                Text = "No recipe has been selected.",
                FontColorOverride = Color.Red,
                Margin = new Thickness(0, 5)
            });
            return;
        }

        string GetGasText(string gas) => GasAbbreviations.TryGetValue(gas, out var abbr) ? abbr : gas;
        string GetGasFullName(Gas gas) => Atmospherics.GasNames.TryGetValue(gas, out var name) ? name : gas.ToString();
        Color? GetGasColor(string gas) => GasColors.TryGetValue(gas, out var color) ? color : (Color?)null;

        var internalFusionMoles = _currentState?.InternalFusionMoles ?? new Dictionary<Gas, float>();
        var recipeGases = new HashSet<string>(recipe.Requirements);

        // Handle recipe gases
        for (int i = 0; i < Math.Min(recipe.Requirements.Count, 2); i++)
        {
            var gas = recipe.Requirements[i];
            var gasBox = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(0, 5)
            };
            gasBox.Children.Add(new Label
            {
                Text = Enum.TryParse<Gas>(gas, out var gasEnum) ? $"{GetGasFullName(gasEnum)}: " : $"{gas}: ",
                FontColorOverride = GetGasColor(gas) ?? Color.White
            });
            gasBox.Children.Add(new Control { HorizontalExpand = true });
            var molesLabel = new Label
            {
                Text = Enum.TryParse<Gas>(gas, out gasEnum) && internalFusionMoles.TryGetValue(gasEnum, out var moles)
                    ? $"{moles:0.00} moles"
                    : "0.00 moles",
                FontColorOverride = GetGasColor(gas) ?? Color.White
            };
            gasBox.Children.Add(molesLabel);
            FusionGasesContent.Children.Add(gasBox);
        }

        // Iterate through all gases in internalFusionMoles
        foreach (var (gasEnum, moles) in internalFusionMoles)
        {
            var gas = gasEnum.ToString();
            if (recipeGases.Contains(gas) || moles < 0.01f)
                continue;

            var gasBox = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(0, 5)
            };
            gasBox.Children.Add(new Label
            {
                Text = $"{GetGasFullName(gasEnum)}: ",
                FontColorOverride = GetGasColor(gas) ?? Color.White
            });
            gasBox.Children.Add(new Control { HorizontalExpand = true });
            var molesLabel = new Label
            {
                Text = $"{moles:0.00} moles",
                FontColorOverride = GetGasColor(gas) ?? Color.White
            };
            gasBox.Children.Add(molesLabel);
            FusionGasesContent.Children.Add(gasBox);
        }
    }

    private void UpdateModeratorGasesContent(HFRConsoleBoundInterfaceState state)
    {
        ModeratorGasesContent.Children.Clear();

        string GetGasText(string gas) => GasAbbreviations.TryGetValue(gas, out var abbr) ? abbr : gas;
        string GetGasFullName(Gas gas) => Atmospherics.GasNames.TryGetValue(gas, out var name) ? name : gas.ToString();
        Color? GetGasColor(string gas) => GasColors.TryGetValue(gas, out var color) ? color : (Color?)null;

        var moderatorMoles = state?.ModeratorInternalMoles ?? new Dictionary<Gas, float>();
        var priorityGases = new List<Gas> { Gas.Plasma, Gas.BZ, Gas.ProtoNitrate };

        // Display Plasma, BZ, ProtoNitrate
        MPlasmaMoles.Text = moderatorMoles.TryGetValue(Gas.Plasma, out var plasmaMoles) ? $"{plasmaMoles:0.00} moles" : "0.00 moles";
        MBZMoles.Text = moderatorMoles.TryGetValue(Gas.BZ, out var bZMoles) ? $"{bZMoles:0.00} moles" : "0.00 moles";
        MProtoNitrateMoles.Text = moderatorMoles.TryGetValue(Gas.ProtoNitrate, out var pNMoles) ? $"{pNMoles:0.00} moles" : "0.00 moles";

        // Iterate through all other gases in moderatorMoles
        foreach (var (gasEnum, moles) in moderatorMoles)
        {
            var gas = gasEnum.ToString();
            if (priorityGases.Contains(gasEnum) || moles < 0.01)
                continue;

            var gasBox = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                Margin = new Thickness(0, 5)
            };
            gasBox.Children.Add(new Label
            {
                Text = $"{GetGasFullName(gasEnum)}: ",
                FontColorOverride = GetGasColor(gas) ?? Color.White
            });
            gasBox.Children.Add(new Control { HorizontalExpand = true });
            var molesLabel = new Label
            {
                Text = $"{moles:0.00} moles",
                FontColorOverride = GetGasColor(gas) ?? Color.White
            };
            gasBox.Children.Add(molesLabel);
            ModeratorGasesContent.Children.Add(gasBox);
        }
    }

    public void DirtyUI()
    {
        if (_currentState == null)
        {
            MPlasmaMoles.Text = "0.00 moles";
            MBZMoles.Text = "0.00 moles";
            MProtoNitrateMoles.Text = "0.00 moles";
            UpdateFusionGasesContent(null);
            ReactorIntegrityLabel.Text = "100%";
            IronContentLabel.Text = "0%";
            AreaPowerLabel.Text = "0%";
            FusionLevelLabel.Text = "0";
            EnergyLabel.Text = "0 TJ";
            ReactionActivityLabel.Text = "0%";
            InstabilityLabel.Text = "0%";

            LowerGraphTempValue = 3f;
            UpperGraphTempValue = 500f;
            UpperGraphTemp.Text = $"{UpperGraphTempValue} K";
            LowerGraphTemp.Text = $"{LowerGraphTempValue} K";

            FusionTemperature.Text = "3 K";
            ModeratorTemperature.Text = "3 K";
            CoolantTemperature.Text = "Empty";
            OutputTemperature.Text = "Empty";
            FusionTrend.Text = "-";
            ModeratorTrend.Text = "-";
            SetBarHeight(FusionTempBar, 0f);
            SetBarHeight(ModeratorTempBar, 0f);
            SetBarHeight(CoolantTempBar, 0f);
            SetBarHeight(OutputTempBar, 0f);
            return;
        }

        UpdateModeratorGasesContent(_currentState);

        UpdateFusionGasesContent(_currentState.SelectedRecipeId);

        var integrityPercent = Math.Max(0, 100 - (_currentState.CriticalThresholdProximity / _currentState.MeltingPoint * 100));
        ReactorIntegrityLabel.Text = $"{integrityPercent:0}%";
        IronContentLabel.Text = $"{_currentState.IronContent:0}%";
        AreaPowerLabel.Text = $"{_currentState.AreaPower:0}%";
        FusionLevelLabel.Text = $"{_currentState.PowerLevel}";
        float energyValue;
        string energyUnit;
        if (_currentState.Energy >= 1e24f) // Yottajoules
        {
            energyValue = _currentState.Energy / 1e24f;
            energyUnit = "YJ";
        }
        else if (_currentState.Energy >= 1e21f) // Zettajoules
        {
            energyValue = _currentState.Energy / 1e21f;
            energyUnit = "ZJ";
        }
        else if (_currentState.Energy >= 1e18f) // Exajoules
        {
            energyValue = _currentState.Energy / 1e18f;
            energyUnit = "EJ";
        }
        else if (_currentState.Energy >= 1e15f) // Petajoules
        {
            energyValue = _currentState.Energy / 1e15f;
            energyUnit = "PJ";
        }
        else // Terajoules
        {
            energyValue = _currentState.Energy / 1e12f;
            energyUnit = "TJ";
        }
        EnergyLabel.Text = $"{energyValue:0} {energyUnit:TJ}";
        ReactionActivityLabel.Text = $"{_currentState.Efficiency * 100:0}%";
        InstabilityLabel.Text = $"{_currentState.Instability:0}%";

        UpdateTemperatureUI(_currentState);
    }

    public void SetReactorState(HFRConsoleUpdateReactorMessage message)
    {
        _currentState = _currentState != null
            ? new HFRConsoleBoundInterfaceState(
                _currentState.IsActive,
                _currentState.IsCooling,
                _currentState.IsFuelInjecting,
                _currentState.IsModeratorInjecting,
                _currentState.FuelInputRate,
                _currentState.ModeratorInputRate,
                message.SelectedRecipeId,
                _currentState.HeatingConductor,
                _currentState.CoolingVolume,
                _currentState.MagneticConstrictor,
                _currentState.CurrentDamper,
                _currentState.IsWasteRemoving,
                _currentState.ModeratorFilteringRate,
                _currentState.FilterGases,
                message.InternalFusionMoles,
                message.ModeratorInternalMoles,
                message.CriticalThresholdProximity,
                message.MeltingPoint,
                message.IronContent,
                message.AreaPower,
                message.PowerLevel,
                message.Energy,
                message.Efficiency,
                message.Instability,
                message.FusionTemperature,
                message.FusionTemperatureArchived,
                message.ModeratorTemperature,
                message.ModeratorTemperatureArchived,
                message.CoolantTemperature,
                message.CoolantTemperatureArchived,
                message.OutputTemperature,
                message.OutputTemperatureArchived,
                message.CoolantMoles,
                message.OutputMoles)
            : new HFRConsoleBoundInterfaceState(
                false,
                false,
                false,
                false,
                0f,
                0f,
                message.SelectedRecipeId,
                0f,
                0,
                0f,
                0f,
                false,
                0f,
                new HashSet<Gas>(),
                message.InternalFusionMoles,
                message.ModeratorInternalMoles,
                message.CriticalThresholdProximity,
                message.MeltingPoint,
                message.IronContent,
                message.AreaPower,
                message.PowerLevel,
                message.Energy,
                message.Efficiency,
                message.Instability,
                message.FusionTemperature,
                message.FusionTemperatureArchived,
                message.ModeratorTemperature,
                message.ModeratorTemperatureArchived,
                message.CoolantTemperature,
                message.CoolantTemperatureArchived,
                message.OutputTemperature,
                message.OutputTemperatureArchived,
                message.CoolantMoles,
                message.OutputMoles);

        PowerLevel = message.PowerLevel;

        UpdateModeratorGasesContent(_currentState);

        UpdateFusionGasesContent(message.SelectedRecipeId);

        var integrityPercent = Math.Max(0, 100 - (message.CriticalThresholdProximity / message.MeltingPoint * 100));
        ReactorIntegrityLabel.Text = $"{integrityPercent:0}%";
        IronContentLabel.Text = $"{message.IronContent*100:0}%";
        AreaPowerLabel.Text = $"{message.AreaPower:0}%";
        FusionLevelLabel.Text = $"{message.PowerLevel}";
        float energyValue;
        string energyUnit;
        if (message.Energy >= 1e24f) // Yottajoules
        {
            energyValue = message.Energy / 1e24f;
            energyUnit = "YJ";
        }
        else if (message.Energy >= 1e21f) // Zettajoules
        {
            energyValue = message.Energy / 1e21f;
            energyUnit = "ZJ";
        }
        else if (message.Energy >= 1e18f) // Exajoules
        {
            energyValue = message.Energy / 1e18f;
            energyUnit = "EJ";
        }
        else if (message.Energy >= 1e15f) // Petajoules
        {
            energyValue = message.Energy / 1e15f;
            energyUnit = "PJ";
        }
        else // Terajoules
        {
            energyValue = message.Energy / 1e12f;
            energyUnit = "TJ";
        }
        EnergyLabel.Text = $"{energyValue:0} {energyUnit:TJ}";
        ReactionActivityLabel.Text = $"{message.Efficiency * 100:0}%";
        InstabilityLabel.Text = $"{message.Instability:0}%";

        UpdateTemperatureUI(_currentState);

        UpdateButtonStates();
    }

    private (float minTemperature, float maxTemperature) CalculateTemperatureBounds(HFRConsoleBoundInterfaceState state)
    {
        float prevPowerLevelTemperature = (float)Math.Pow(10, 1 + state.PowerLevel);
        float nextPowerLevelTemperature = (float)Math.Pow(10, 2 + state.PowerLevel);

        if (state.PowerLevel == 0)
        {
            prevPowerLevelTemperature = 0f;
            nextPowerLevelTemperature = 500f;
        }
        else if (state.PowerLevel == 1)
        {
            prevPowerLevelTemperature = 500f;
        }
        else if (state.PowerLevel == 6)
        {
            float temperatureMultiplier = 1f;
            if (state.SelectedRecipeId != null &&
                _protoManager.TryIndex<FusionRecipePrototype>(state.SelectedRecipeId, out var recipe))
            {
                temperatureMultiplier = recipe.TemperatureChangeMultiplier;
            }
            nextPowerLevelTemperature = BaseMaxTemperature * temperatureMultiplier;
        }

        var temperatures = new List<float> { prevPowerLevelTemperature, nextPowerLevelTemperature };

        if (state.FusionTemperature > 0)
            temperatures.Add(state.FusionTemperature);
        if (state.ModeratorTemperature > 0)
            temperatures.Add(state.ModeratorTemperature);
        if (state.CoolantMoles > 0.01f && state.CoolantTemperature > 0)
            temperatures.Add(state.CoolantTemperature);
        if (state.OutputMoles > 0.01f && state.OutputTemperature > 0)
            temperatures.Add(state.OutputTemperature);

        float maxTemperature = temperatures.Max();
        float minTemperature = Math.Max(3f, Math.Min(20f, temperatures.Where(t => t > 0).DefaultIfEmpty(3f).Min()));

        return (minTemperature, maxTemperature);
    }

    private void UpdateTemperatureUI(HFRConsoleBoundInterfaceState state)
    {
        (LowerGraphTempValue, UpperGraphTempValue) = CalculateTemperatureBounds(state);

        UpperGraphTemp.Text = $"{UpperGraphTempValue:0} K";
        LowerGraphTemp.Text = $"{LowerGraphTempValue:0} K";

        FusionTemperature.Text = $"{state.FusionTemperature:0} K";
        FusionTrend.Text = state.FusionTemperature > state.FusionTemperatureArchived ? $"+{(int)(state.FusionTemperature - state.FusionTemperatureArchived)} K"
                         : state.FusionTemperature < state.FusionTemperatureArchived ? $"-{(int)(state.FusionTemperatureArchived - state.FusionTemperature)} K" : "-";
        SetBarHeight(FusionTempBar, CalculateBarHeight(state.FusionTemperature));

        ModeratorTemperature.Text = $"{state.ModeratorTemperature:0} K";
        ModeratorTrend.Text = state.ModeratorTemperature > state.ModeratorTemperatureArchived ? $"+{(int)(state.ModeratorTemperature - state.ModeratorTemperatureArchived)} K"
                           : state.ModeratorTemperature < state.ModeratorTemperatureArchived ? $"-{(int)(state.ModeratorTemperatureArchived - state.ModeratorTemperature)} K" : "-";
        SetBarHeight(ModeratorTempBar, CalculateBarHeight(state.ModeratorTemperature));

        const float moleThreshold = 0.01f;
        bool coolantEmpty = state.CoolantMoles <= moleThreshold;
        if (coolantEmpty)
        {
            CoolantTemperature.Text = "Empty";
            CoolantTemperature.FontColorOverride = Color.Red;
            SetBarHeight(CoolantTempBar, 0f);
        }
        else
        {
            CoolantTemperature.Text = $"{state.CoolantTemperature:0} K";
            CoolantTemperature.FontColorOverride = null;
            SetBarHeight(CoolantTempBar, CalculateBarHeight(state.CoolantTemperature));
        }

        bool outputEmpty = state.OutputMoles <= moleThreshold;
        if (outputEmpty)
        {
            OutputTemperature.Text = "Empty";
            OutputTemperature.FontColorOverride = Color.Red;
            SetBarHeight(OutputTempBar, 0f);
        }
        else
        {
            OutputTemperature.Text = $"{state.OutputTemperature:0} K";
            OutputTemperature.FontColorOverride = null;
            SetBarHeight(OutputTempBar, CalculateBarHeight(state.OutputTemperature));
        }
    }

    private float CalculateBarHeight(float temperature)
    {
        if (temperature <= 0 || float.IsNaN(temperature) || float.IsInfinity(temperature))
            return 0f;

        float clampedTemp = Math.Clamp(temperature, LowerGraphTempValue, UpperGraphTempValue);
        float logTemp = (float)Math.Log10(clampedTemp);
        float logMin = (float)Math.Log10(LowerGraphTempValue);
        float logMax = (float)Math.Log10(UpperGraphTempValue);

        float ratio = (logTemp - logMin) / (logMax - logMin);
        if (float.IsNaN(ratio) || float.IsInfinity(ratio))
            return 0f;

        return ratio * MaxBarHeight;
    }

    private void SetBarHeight(PanelContainer bar, float height)
    {
        height = Math.Clamp(height, 0f, MaxBarHeight);
        bar.MinSize = new Vector2(bar.MinSize.X, height);
        bar.MaxSize = new Vector2(bar.MaxSize.X, height);
    }

    private void SelectButton(Button button, string recipeId)
    {
        if (_selectedButton != null && _selectedButton != button)
        {
            _selectedButton.Text = " ";
            _selectedButton.Pressed = false;
            if (_recipePanels.TryGetValue(_selectedButton, out var prevPanel) &&
                _recipePanelIsDark.TryGetValue(_selectedButton, out var isDark))
            {
                prevPanel.PanelOverride = isDark ? new StyleBoxFlat { BackgroundColor = Color.FromHex("#222222") } : null;
            }
        }

        button.Text = " ";
        button.Pressed = true;
        _selectedButton = button;

        if (_recipePanels.TryGetValue(button, out var panel))
        {
            panel.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#172d44") };
        }

        OnSelectRecipe?.Invoke(recipeId);
    }

    public void UpdateTableButtons(string? selectedRecipeId)
    {
        foreach (var (button, recipeId) in _recipeButtons)
        {
            if (recipeId == selectedRecipeId)
            {
                button.Pressed = true;
                _selectedButton = button;
                if (_recipePanels.TryGetValue(button, out var panel))
                {
                    panel.PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#172d44") };
                }
            }
            else
            {
                button.Pressed = false;
                if (_recipePanels.TryGetValue(button, out var panel) &&
                    _recipePanelIsDark.TryGetValue(button, out var isDark))
                {
                    panel.PanelOverride = isDark ? new StyleBoxFlat { BackgroundColor = Color.FromHex("#222222") } : null;
                }
            }
        }
    }

    private void OnTogglePowerButtonPressed()
    {
        SetActive(!Active);
    }

    private void OnToggleCoolingButtonPressed()
    {
        SetCooling(!Cooling);
    }

    private void OnToggleFuelInjectionButtonPressed()
    {
        SetFuelInjecting(!FuelInjecting);
    }

    private void OnToggleModeratorInjectionButtonPressed()
    {
        SetModeratorInjecting(!ModeratorInjecting);
    }

    private void OnToggleWasteRemoveButtonPressed()
    {
        SetWasteRemoving(!WasteRemoving);
    }

    public void SetActive(bool active)
    {
        Active = active;
        TogglePowerButton.Text = active
            ? Loc.GetString("comp-gas-thermomachine-ui-status-enabled")
            : Loc.GetString("comp-gas-thermomachine-ui-status-disabled");
        TogglePowerButton.Pressed = active;
        UpdateButtonStates();
    }

    public void SetCooling(bool cooling)
    {
        Cooling = cooling;
        ToggleCoolingButton.Text = cooling
            ? Loc.GetString("comp-gas-thermomachine-ui-status-enabled")
            : Loc.GetString("comp-gas-thermomachine-ui-status-disabled");
        ToggleCoolingButton.Pressed = cooling;
        UpdateButtonStates();
    }

    public void SetFuelInjecting(bool fuelInjecting)
    {
        FuelInjecting = fuelInjecting;
        ToggleFuelInjectionButton.Text = fuelInjecting
            ? Loc.GetString("comp-gas-thermomachine-ui-status-enabled")
            : Loc.GetString("comp-gas-thermomachine-ui-status-disabled");
        ToggleFuelInjectionButton.Pressed = fuelInjecting;
        UpdateButtonStates();
    }

    public void SetModeratorInjecting(bool moderatorInjecting)
    {
        ModeratorInjecting = moderatorInjecting;
        ToggleModeratorInjectionButton.Text = moderatorInjecting
            ? Loc.GetString("comp-gas-thermomachine-ui-status-enabled")
            : Loc.GetString("comp-gas-thermomachine-ui-status-disabled");
        ToggleModeratorInjectionButton.Pressed = moderatorInjecting;
        UpdateButtonStates();
    }

    public void SetWasteRemoving(bool wasteRemoving)
    {
        WasteRemoving = wasteRemoving;
        ToggleWasteRemoveButton.Text = wasteRemoving
            ? Loc.GetString("comp-gas-thermomachine-ui-status-enabled")
            : Loc.GetString("comp-gas-thermomachine-ui-status-disabled");
        ToggleWasteRemoveButton.Pressed = wasteRemoving;
        UpdateButtonStates();
    }

    public void SetFuelInputRate(float rate)
    {
        rate = Math.Clamp(rate, 0.1f, 150f);
        if (FuelInputRate != rate)
        {
            FuelInputRate = rate;
            FuelInputRateSpinbox.Value = rate;
        }
    }

    public void SetModeratorInputRate(float rate)
    {
        rate = Math.Clamp(rate, 0.1f, 150f);
        if (ModeratorInputRateSpinbox.Value != rate)
        {
            ModeratorInputRate = rate;
            ModeratorInputRateSpinbox.Value = rate;
        }
    }

    public void SetHeatingConductor(float rate)
    {
        rate = Math.Clamp(rate, 50f, 500f);
        if (HeatingConductorSpinBox.Value != rate)
        {
            HeatingConductor = rate;
            HeatingConductorSpinBox.Value = rate;
        }
    }

    public void SetCoolingVolume(int rate)
    {
        rate = Math.Clamp(rate, 50, 2000);
        if (CoolingVolumeSpinBox.Value != rate)
        {
            CoolingVolume = rate;
            CoolingVolumeSpinBox.Value = rate;
        }
    }

    public void SetMagneticConstrictor(float rate)
    {
        rate = Math.Clamp(rate, 50f, 1000f);
        if (MagneticConstrictorSpinBox.Value != rate)
        {
            MagneticConstrictor = rate;
            MagneticConstrictorSpinBox.Value = rate;
        }
    }

    public void SetCurrentDamper(float rate)
    {
        rate = Math.Clamp(rate, 0f, 1000f);
        if (CurrentDamperSpinBox.Value != rate)
        {
            CurrentDamper = rate;
            CurrentDamperSpinBox.Value = rate;
        }
    }

    public void SetModeratorFilteringRate(float rate)
    {
        rate = Math.Clamp(rate, 5f, 200f);
        if (ModeratorFilteringRate != rate)
        {
            ModeratorFilteringRate = rate;
            ModeratorFilteringRateSpinBox.Value = rate;
        }
    }

    public void SetFilterGases(HashSet<Gas> gases)
    {
        FilterGases = new HashSet<Gas>(gases);
        foreach (var (gas, button) in _gasControls)
        {
            button.Pressed = FilterGases.Contains(gas);
        }
    }

    private void UpdateButtonStates()
    {
        ToggleCoolingButton.Disabled = !Active || FuelInjecting || ModeratorInjecting;
        ToggleFuelInjectionButton.Disabled = !Active || !Cooling || _currentState?.SelectedRecipeId == null;
        ToggleModeratorInjectionButton.Disabled = !Active || !Cooling;
        TogglePowerButton.Disabled = PowerLevel > 0 && Active;
    }

    public void UpdateState(HFRConsoleBoundInterfaceState state)
    {
        _currentState = state;
        SetActive(state.IsActive);
        SetCooling(state.IsCooling);
        SetFuelInjecting(state.IsFuelInjecting);
        SetModeratorInjecting(state.IsModeratorInjecting);
        SetFuelInputRate(state.FuelInputRate);
        SetModeratorInputRate(state.ModeratorInputRate);
        SetHeatingConductor(state.HeatingConductor);
        SetCoolingVolume(state.CoolingVolume);
        SetMagneticConstrictor(state.MagneticConstrictor);
        SetCurrentDamper(state.CurrentDamper);
        SetWasteRemoving(state.IsWasteRemoving);
        SetModeratorFilteringRate(state.ModeratorFilteringRate);
        SetFilterGases(state.FilterGases);
        PowerLevel = state.PowerLevel;
        UpdateButtonStates();
        UpdateTableButtons(state.SelectedRecipeId);
        DirtyUI();
    }

    public void SetOwner(EntityUid? owner)
    {
        _owner = owner;
    }
}