// SPDX-FileCopyrightText: 2021 ike709 <ike709@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 Paul Ritter <ritter.paul1@googlemail.com>
// SPDX-FileCopyrightText: 2022 Pieter-Jan Briers <pieterjan.briers+git@gmail.com>
// SPDX-FileCopyrightText: 2022 Vordenburg <114301317+Vordenburg@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 mirrorcult <lunarautomaton6@gmail.com>
// SPDX-FileCopyrightText: 2022 wrexbe <81056464+wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 Visne <39844191+Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Kot <1192090+koteq@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Nemanja <98561806+EmoGarbage404@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Steve <marlumpy@gmail.com>
// SPDX-FileCopyrightText: 2025 taydeo <td12233a@gmail.com>
//
// SPDX-License-Identifier: MIT

using System;
using System.Collections.Generic;
using System.Globalization;
using Content.Client.Atmos.EntitySystems;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Atmos.UI
{
    /// <summary>
    /// Client-side UI used to control a gas filter.
    /// Funkystation - adapted for filtering multiple gases at once.
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class GasFilterWindow : DefaultWindow
    {
        // Funky - removed for filtering of multiple gases
        // private readonly ButtonGroup _buttonGroup = new();

        // public bool FilterStatus = true;
        // public string? SelectedGas;
        // public string? CurrentGasId;

        private readonly Dictionary<Gas, Button> _gasControls = new(); // Funky - for filtering of multiple gases
        private readonly HashSet<Gas> _selectedGases = new(); // Funky - for filtering of multiple gases

        public event Action? ToggleStatusButtonPressed;
        public event Action<string>? FilterTransferRateChanged;

        // Funky - removed for filtering of multiple gases
        // public event Action? SelectGasPressed;

        public event Action<HashSet<Gas>>? FilterGasesChanged; // Funky - for filtering of multiple gases

        public GasFilterWindow()
        {
            RobustXamlLoader.Load(this);

            ToggleStatusButton.OnPressed += _ => SetFilterStatus(!FilterStatus);
            ToggleStatusButton.OnPressed += _ => ToggleStatusButtonPressed?.Invoke();

            FilterTransferRateInput.OnTextChanged += _ => SetFilterRate.Disabled = false;
            SetFilterRate.OnPressed += _ =>
            {
                FilterTransferRateChanged?.Invoke(FilterTransferRateInput.Text);
                SetFilterRate.Disabled = true;
            };

            // Funky - removed for filtering of multiple gases
            // SelectGasButton.OnPressed += _ => SelectGasPressed?.Invoke();

            // GasList.OnItemSelected += GasListOnItemSelected;
            // GasList.OnItemDeselected += GasListOnItemDeselected;

            SelectAllButton.OnPressed += args => SelectAllGases(args); // Funky - for filtering of multiple gases
            DeselectAllButton.OnPressed += args => DeselectAllGases(args); // Funky - for filtering of multiple gases
        }

        public void SetTransferRate(float rate)
        {
            FilterTransferRateInput.Text = rate.ToString(CultureInfo.CurrentCulture);
        }

        public bool FilterStatus { get; private set; } = true; // Funky - for filtering of multiple gases

        public void SetFilterStatus(bool enabled)
        {
            FilterStatus = enabled;
            if (enabled)
            {
                ToggleStatusButton.Text = Loc.GetString("comp-gas-filter-ui-status-enabled");
            }
            else
            {
                ToggleStatusButton.Text = Loc.GetString("comp-gas-filter-ui-status-disabled");
            }
        }

        /// <summary>
        /// Funky - for filtering of multiple gases
        /// </summary>
        public void SetFilteredGases(HashSet<Gas> gases)
        {
            _selectedGases.Clear();
            _selectedGases.UnionWith(gases);
            foreach (var (gas, button) in _gasControls)
            {
                button.Pressed = gases.Contains(gas);
            }
        }

        public void PopulateGasList(IEnumerable<GasPrototype> gases)
        {
            foreach (var gas in gases)
            {
                var gasButton = new Button
                {
                    Name = gas.ID.ToString(),
                    Text = Loc.GetString(gas.Name),
                    ToggleMode = true,
                    HorizontalExpand = true,
                    Pressed = _selectedGases.Contains((Gas) int.Parse(gas.ID))
                };
                gasButton.OnToggled += args =>
                {
                    var gasId = (Gas) int.Parse(gasButton.Name);
                    if (args.Pressed)
                        _selectedGases.Add(gasId);
                    else
                        _selectedGases.Remove(gasId);
                    FilterGasesChanged?.Invoke(new HashSet<Gas>(_selectedGases));
                };
                _gasControls.Add((Gas) int.Parse(gas.ID), gasButton);
                GasContainer.AddChild(gasButton);
            }
        }

        private void SelectAllGases(BaseButton.ButtonEventArgs args)
        {
            foreach (var (gas, button) in _gasControls)
            {
                button.Pressed = true;
                _selectedGases.Add(gas);
            }
            FilterGasesChanged?.Invoke(new HashSet<Gas>(_selectedGases));
        }

        private void DeselectAllGases(BaseButton.ButtonEventArgs args)
        {
            foreach (var (_, button) in _gasControls)
            {
                button.Pressed = false;
            }
            _selectedGases.Clear();
            FilterGasesChanged?.Invoke(new HashSet<Gas>(_selectedGases));
        }

        /// <summary>
        /// Funky - end of changes for filtering of multiple gases
        /// </summary>

        /// <summary>
        /// Funky - below removed for filtering of multiple gases
        /// </summary>

        // public void SetGasFiltered(string? id, string name)
        // {
        //     CurrentGasId = id;
        //     CurrentGasLabel.Text = Loc.GetString("comp-gas-filter-ui-filter-gas-current") + $" {name}";
        //     GasList.ClearSelected();
        //     SelectGasButton.Disabled = true;
        // }

        // public void PopulateGasList(IEnumerable<GasPrototype> gases)
        // {
        //     GasList.Add(new ItemList.Item(GasList)
        //     {
        //         Metadata = null,
        //         Text = Loc.GetString("comp-gas-filter-ui-filter-gas-none")
        //     });

        //     foreach (var gas in gases)
        //     {
        //         var gasName = Loc.GetString(gas.Name);
        //         GasList.Add(GetGasItem(gas.ID, gasName, GasList));
        //     }
        // }

        // private static ItemList.Item GetGasItem(string id, string name, ItemList itemList)
        // {
        //     return new(itemList)
        //     {
        //         Metadata = id,
        //         Text = name
        //     };
        // }

        // private void GasListOnItemSelected(ItemList.ItemListSelectedEventArgs obj)
        // {
        //     SelectedGas = (string) obj.ItemList[obj.ItemIndex].Metadata!;
        //     if(SelectedGas != CurrentGasId) SelectGasButton.Disabled = false;
        // }

        // private void GasListOnItemDeselected(ItemList.ItemListDeselectedEventArgs obj)
        // {
        //     SelectedGas = CurrentGasId;
        //     SelectGasButton.Disabled = true;
        // }
    }
}