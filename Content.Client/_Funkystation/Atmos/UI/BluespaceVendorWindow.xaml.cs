using System;
using System.Numerics;
using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Graphics;
using Robust.Shared.Prototypes;
using Robust.Shared.Input;
using Range = Robust.Client.UserInterface.Controls.Range;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Shared.Atmos;
using static Content.Shared.Atmos.Components.GasAnalyzerComponent;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client._Funkystation.Atmos.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedBluespaceVendorComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class BluespaceVendorWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action? TankEjectButtonPressed;
        public event Action? TankEmptyButtonPressed;
        public event Action<int>? TankFillButtonPressed;
        public event Action<int>? RetrieveButtonPressed;
        public event Action<float>? ReleasePressureSet;
        
        public BluespaceVendorWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            TankEjectButton.OnPressed += _ => TankEjectButtonPressed?.Invoke();
            TankEmptyButton.OnPressed += _ => TankEmptyButtonPressed?.Invoke();
            ReleasePressure.OnValueChanged += _ => ReleasePressureSet?.Invoke(ReleasePressure.Value);
        }

        public void ToggleEjectButton(string? label, GasMixture? tankGasMixture)
        {
            UpdateFillBar(tankGasMixture);
            if (label == null)
            {
                TankEjectButton.Disabled = true;
                return;
            }
            TankEjectButton.Disabled = false;
        }

        public void ToggleEmptyTankButton(string? label, bool? senderConnected)
        {
            if (label != null && senderConnected == true)
            {
                TankEmptyButton.Disabled = false;
                return;
            }

            TankEmptyButton.Disabled = true;
        }

        public void ToggleGasList(bool? senderConnected, GasMixture? bluespaceGasMixture, List<bool>? retrievingGases, GasMixture? tankGasMixture)
        {
            if (senderConnected == false)
            {
                GasListBox.Children.Clear();
                GasListBox.Children.Add(new Label { Text = "Not connected to bluespace network" });
                return;
            }
            UpdateFillBar(tankGasMixture);
            BuildGasList(retrievingGases, bluespaceGasMixture, tankGasMixture);
        }

        public void BuildGasList(List<bool>? retrievingGases, GasMixture? bluespaceGasMixture, GasMixture? tankGasMixture)
        {
            GasListBox.Children.Clear();

            if (bluespaceGasMixture == null || bluespaceGasMixture.TotalMoles < 0.01)
            {
                var GasBox = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    HorizontalExpand = true,
                    Margin = new Thickness(10, 10)
                };
                var NoGasMessage = new Label
                {
                    Text = "There are no gases in the network"
                };

                GasBox.Children.Add(NoGasMessage);
                GasListBox.Children.Add(GasBox);
            }
            else
            {
                int colorSwap = 1;
                for (var i = 0; i < Atmospherics.TotalNumberOfGases-1; i++)
                {
                    int index = i;
                    var gasName = Enum.GetName(typeof(Gas), index) ?? "Unknown Gas";

                    float moles = bluespaceGasMixture.GetMoles(index);

                    if (moles > 0f)
                    {
                        colorSwap *= -1;
                        var GasPanel = new PanelContainer
                        {
                            PanelOverride = new StyleBoxFlat(colorSwap == 1 ? Color.FromHex("#1B1B1E"):Color.FromHex("#202025"))
                        };

                        var GasBox = new BoxContainer
                        {
                            Orientation = LayoutOrientation.Horizontal,
                            HorizontalExpand = true,
                            Margin = new Thickness(10, 10)
                        };

                        var GasNameBox = new BoxContainer
                        {
                            MinSize = new Vector2(120, 0)
                        };

                        var GasName = new Label
                        {
                            Text = $"{gasName}"
                        };

                        var GasAmount = new Label
                        {
                            Name = "GasAmount",
                            Text = $"{moles.ToString("F2")} moles",
                            HorizontalExpand = true,
                            HorizontalAlignment = HAlignment.Center // Center directly
                        };
                        
                        var RetrieveButton = new Button
                        {
                            Name = "RetrieveButton",
                            Text = "â–¶",
                            Pressed = retrievingGases != null && retrievingGases[index] ? true : false
                        };

                        RetrieveButton.OnPressed += _ => RetrieveButtonPressed?.Invoke(index);

                        GasNameBox.Children.Add(GasName);
                        GasBox.Children.Add(GasNameBox);
                        GasBox.Children.Add(new Control { HorizontalExpand = true });
                        GasBox.Children.Add(GasAmount);
                        GasBox.Children.Add(new Control { HorizontalExpand = true });
                        GasBox.Children.Add(RetrieveButton);

                        GasPanel.Children.Add(GasBox);
                        GasListBox.Children.Add(GasPanel);
                    }
                }
            }
        }

        public void UpdateFillBar(GasMixture? tankGasMixture)
        {
            if (tankGasMixture == null)
            {
                FillBarPanel.MinSize = new Vector2(0, 20); 
                return;
            }

            float pressure = tankGasMixture.Pressure;
            float fillPercentage = Math.Clamp(pressure / 1000f, 0f, 1f); 

            var parentContainer = FillBarPanel.Parent?.Parent as PanelContainer; 
            if (parentContainer != null)
            {
                float parentWidth = parentContainer.Size.X; 
                float targetWidth = parentWidth * fillPercentage;

                FillBarPanel.MinSize = new Vector2(targetWidth, 20);
            }
        }

        public void SetReleasePressureSpinbox(float releasePressure)
        {
            if (ReleasePressure.Value == releasePressure || releasePressure == null)
                return;
            ReleasePressure.Value = releasePressure;
        }
    }
}
