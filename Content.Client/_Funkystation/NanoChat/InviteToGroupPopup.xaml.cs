// SPDX-FileCopyrightText: 2025 EvaisaDev <mail@evaisa.dev>
//
// SPDX-License-Identifier: AGPL-3.0-or-later AND MIT

using System.Linq;
using System.Numerics;
using Content.Shared._DV.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Funkystation.NanoChat;

[GenerateTypedNameReferences]
public sealed partial class InviteToGroupPopup : DefaultWindow
{
    private List<NanoChatRecipient> _allContacts = new();
    private HashSet<uint> _existingMembers = new();
    private uint _ownNumber;

    public event Action<uint>? OnInvite;

    public InviteToGroupPopup()
    {
        RobustXamlLoader.Load(this);

        ContentsContainer.Margin = new Thickness(3);

        InviteCloseButton.OnPressed += _ => Close();

        SearchInput.OnTextChanged += _ => UpdateContactList();
    }

    public void SetContacts(List<NanoChatRecipient> contacts, HashSet<uint> existingMembers, uint ownNumber)
    {
        _allContacts = contacts;
        _existingMembers = existingMembers;
        _ownNumber = ownNumber;
        UpdateContactList();
    }

    private void UpdateContactList()
    {
        ContactsList.RemoveAllChildren();

        if (_allContacts.Count == 0)
        {
            ContactsList.AddChild(new Label { Text = Loc.GetString("nano-chat-look-up-no-server") });
            return;
        }

        var searchText = SearchInput.Text.ToLower();
        var filteredContacts = _allContacts
            .Where(c => c.Number != _ownNumber &&
                !_existingMembers.Contains(c.Number) &&
                (string.IsNullOrWhiteSpace(searchText) ||
                    c.Name.ToLower().Contains(searchText) ||
                    c.Number.ToString().Contains(searchText)))
            .ToList();

        if (filteredContacts.Count == 0)
        {
            ContactsList.AddChild(new Label { Text = Loc.GetString("nano-chat-no-results") });
            return;
        }

        for (var idx = 0; idx < filteredContacts.Count; idx++)
        {
            var contact = filteredContacts[idx];
            var isEvenRow = idx % 2 == 0;
            var contactControl = new ContactContainer(contact, isEvenRow, OnInvite);
            ContactsList.AddChild(contactControl);
        }
    }

    public void ClearSearch()
    {
        SearchInput.Text = string.Empty;
    }

    private sealed class ContactContainer : PanelContainer
    {
        public ContactContainer(NanoChatRecipient contact, bool isEvenRow, Action<uint>? onInvite)
        {
            HorizontalExpand = true;
            StyleClasses.Add(isEvenRow ? "PanelBackgroundBaseDark" : "PanelBackgroundLight");

            var nameLabel = new Label
            {
                Text = contact.Name,
                HorizontalAlignment = HAlignment.Left,
                HorizontalExpand = true
            };

            var numberLabel = new Label
            {
                Text = $"#{contact.Number:D4}",
                HorizontalAlignment = HAlignment.Right,
                Margin = new Thickness(0, 0, 36, 0),
            };

            var inviteButton = new Button
            {
                Text = "+",
                HorizontalAlignment = HAlignment.Right,
                MinSize = new Vector2(32, 32),
                MaxSize = new Vector2(32, 32),
                ToolTip = Loc.GetString("nano-chat-invite"),
            };

            inviteButton.AddStyleClass("OpenBoth");
            inviteButton.OnPressed += _ => onInvite?.Invoke(contact.Number);

            AddChild(nameLabel);
            AddChild(numberLabel);
            AddChild(inviteButton);
        }
    }
}
