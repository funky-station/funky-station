using System;
using System.Numerics;
using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Graphics;
using Robust.Shared.Prototypes;
using Robust.Shared.Input;
using Range = Robust.Client.UserInterface.Controls.Range;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Shared.Atmos;
using static Content.Shared.Atmos.Components.GasAnalyzerComponent;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client._Funkystation.Atmos.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedBluespaceVendorComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class BluespaceVendorWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action? TankEjectButtonPressed;
        public event Action? TankEmptyButtonPressed;
        public event Action<int>? TankFillButtonPressed;
        public event Action<float, int>? ReleasePressureSet;

        [DataField("gasList")]
        public List<Gas> GasList = new()
        {
            Gas.Oxygen,
            Gas.Nitrogen,
            Gas.CarbonDioxide,
            Gas.Plasma,
            Gas.Tritium,
            Gas.WaterVapor,
            Gas.Ammonia,
            Gas.NitrousOxide,
            Gas.Frezon,
            Gas.BZ, // Assmos - /tg/ gases
            Gas.Healium, // Assmos - /tg/ gases
            Gas.Nitrium, // Assmos - /tg/ gases
            Gas.Pluoxium, // Assmos - /tg/ gases
            Gas.Hydrogen, // Assmos - /tg/ gases
        };
        
        public BluespaceVendorWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            TankEjectButton.OnPressed += _ => TankEjectButtonPressed?.Invoke();
            TankEmptyButton.OnPressed += _ => TankEmptyButtonPressed?.Invoke();
        }

        public void ToggleEjectButton(string? label, GasMixture? tankGasMixture)
        {
            if (label == null)
            {
                TankEjectButton.Disabled = true;
                return;
            }

            TankEjectButton.Disabled = false;
        }

        public void ToggleEmptyTankButton(string? label, bool? senderConnected)
        {
            if (label != null && senderConnected == true)
            {
                TankEmptyButton.Disabled = false;
                return;
            }

            TankEmptyButton.Disabled = true;
        }

        public void ToggleGasList(bool? senderConnected, List<bool>? enabledGases)
        {
            if (senderConnected == false)
            {
                GasListBox.Children.Clear();
                GasListBox.Children.Add(new Label { Text = "Not connected to bluespace network" });
                return;
            }

            BuildGasList(enabledGases);
        }

        public void BuildGasList(List<bool>? enabledGases)
        {
            GasListBox.Children.Clear();

            foreach (var gas in GasList.Select((name, i) => new { i, name }))
            {
                var gasName = gas.name;
                var index = gas.i;

                var GasBox = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical
                };

                var GasName = new Label
                {
                    Text = $"{gasName}"
                };

                var GasAmount = new Label
                {
                    Name = "GasAmount",
                    Text = "0"
                };

                var PressureSpinBox = new FloatSpinBox
                {
                    Name = $"{gasName}ReleasePressure"
                };
                
                var AddButton = new Button
                {
                    Name = "TankFillButton",
                    Text = "Add"
                };

                if (enabledGases == null || !enabledGases[index])
                {
                    AddButton.Text = "Locked";
                    AddButton.Disabled = true;
                }

                PressureSpinBox.OnValueChanged += _ => ReleasePressureSet?.Invoke(PressureSpinBox.Value, index);
                AddButton.OnPressed += _ => TankFillButtonPressed?.Invoke(index);

                GasBox.Children.Add(GasName);
                GasBox.Children.Add(GasAmount);
                GasBox.Children.Add(PressureSpinBox);
                GasBox.Children.Add(AddButton);

                GasListBox.Children.Add(GasBox);
            }
        }

        public void SetBluespaceGasMixture(GasMixture? bluespaceGasMixture)
        {
            if (bluespaceGasMixture == null)
            {
                return;
            }

            for (int i = 0; i < GasListBox.Children.Count(); i++)
            {
                var gasBox = GasListBox.Children.ElementAt(i) as BoxContainer;
                if (gasBox == null) continue;

                // Find the GasAmount label within this GasBox
                var gasAmountLabel = gasBox.Children.FirstOrDefault(child => child.Name == "GasAmount") as Label;
                if (gasAmountLabel != null)
                {
                    // Update the label with the moles (or pressure) of this gas
                    float moles = bluespaceGasMixture.GetMoles(i); // Assuming GasMixture has GetMoles
                    gasAmountLabel.Text = moles.ToString("F2"); // Format to 2 decimal places
                }
            }
        }
    }
}
